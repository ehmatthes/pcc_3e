{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Crash Course, Third Edition","text":"<p>This is a collection of resources for Python Crash Course (3rd Ed.), an introductory programming book from No Starch Press by Eric Matthes.</p> <p>The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects.</p> <p>Download .zip View on GitHub</p> <p>Note: Some of the second edition's resources may still be useful, such as Finding Employment and Recommended Reading.</p> <p>If you have any questions about Python Crash Course, feel free to get in touch:</p> <p>Email: ehmatthes@gmail.com</p> <p>Mastodon: @ehmatthes@fosstodon.org</p> <p>Bluesky: @ehmatthes.bsky.social</p> <p>Biweekly newsletter: Mostly Python</p> <p></p> <p>Available from No Starch Press, Amazon, and Barnes &amp; Noble. You can also find Python Crash Course in person at Barnes &amp; Noble bookstores, and other fine booksellers worldwide.</p>"},{"location":"cheat_sheets/","title":"Cheat Sheets","text":"<p>Cheat sheets can be really helpful when you\u2019re trying a set of exercises related to a specific topic, or working on a project. Because you can only fit so much information on a single sheet of paper, most cheat sheets are a simple listing of syntax rules. This set of cheat sheets aims to remind you of syntax rules, but also remind you of important concepts as well.</p> <p>You can download all of the sheets in a single color document. You can also download a zip file containing all color and printer-friendly black and white versions.</p> <p>The full set includes:</p> <ul> <li>An overview sheet covering a wide range of topics</li> <li>A series of sheets that focus on the fundamentals of Python</li> <li>A series of sheets focusing on specific libraries: pytest, Pygame, Matplotlib, Plotly, and Django</li> <li>A sheet focusing on Git basics</li> </ul> <p>These sheets are completely free to use and share. I originally wrote them as a way to support readers of Python Crash Course, but they've proven useful to people working through a wide range of Python learning resources as well. (If you find them useful and want to see more of my writing on Python, check out my ongoing work at Mostly Python.)</p>"},{"location":"cheat_sheets/#individual-sheet-descriptions","title":"Individual Sheet Descriptions","text":""},{"location":"cheat_sheets/#overview-sheet","title":"Overview Sheet","text":"<ul> <li>Beginner's Python Cheat Sheet<ul> <li>Provides an overview of the basics of Python including variables, lists, dictionaries, functions, classes, and more.</li> </ul> </li> </ul>"},{"location":"cheat_sheets/#python-basics","title":"Python Basics","text":"<ul> <li>Beginner's Python Cheat Sheet - Lists<ul> <li>Focuses on lists: how to build and modify a list, access elements from a list, and loop through the values in a list. Also covers numerical lists, list comprehensions, tuples, and more.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Dictionaries<ul> <li>Focuses on dictionaries: how to build and modify a dictionary, access the information in a dictionary, and loop through dictionaries in a variety of ways. Includes sections on nesting lists and dictionaries, using dictionary comprehensions, and more.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - If Statements and While Loops<ul> <li>Focuses on <code>if</code> statements and <code>while</code> loops: how to write conditional tests with strings and numerical data, how to write simple and complex if statements, and how to accept user input. Also covers a variety of approaches to using <code>while</code> loops.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Functions<ul> <li>Focuses on functions: how to define a function and how to pass information to a function. Covers positional and keyword arguments, return values, passing lists, using modules, and more</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Classes<ul> <li>Focuses on classes: how to define and use a class. Covers attributes and methods, inheritance and importing, and more.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Files and Exceptions<ul> <li>Focuses on working with files, and using exceptions to handle errors that might arise as your programs run. Covers reading and writing to files, try-except-else blocks, and storing data using the <code>json</code> module.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Testing Your Code<ul> <li>Focuses on unit tests and test cases. How to test a function, and how to test a class.</li> </ul> </li> </ul>"},{"location":"cheat_sheets/#project-focused-sheets","title":"Project-Focused Sheets","text":"<ul> <li>Beginner's Python Cheat Sheet - Pygame<ul> <li>Focuses on creating games with Pygame. Creating a game window, rect objects, images, responding to keyboard and mouse input, groups, detecting collisions between game elements, and rendering text</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Matplotlib<ul> <li>Focuses on creating visualizations with Matplotlib. Making line graphs and scatter plots, customizing plots, making multiple plots, and working with time-based data.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Plotly<ul> <li>Focuses on creating visualizations with Plotly. Making line graphs, scatter plots, and bar graphs, styling plots, making multiple plots, and working with geographical datasets.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Django<ul> <li>Focuses on creating web apps with Django. Installing Django and starting a project, working with models, building a home page, using templates, using data, and making user accounts.</li> </ul> </li> <li>Beginner's Python Cheat Sheet - Git<ul> <li>Focuses on using Git for version control. Installing and configuring Git, initializing a repository, branching, getting started with GitHub, and more.</li> </ul> </li> </ul> <p>If you find any errors, please feel free to get in touch:</p> <p>Email: ehmatthes@gmail.com</p> <p>Mastodon: @ehmatthes@fosstodon.org</p> <p>Bluesky: @ehmatthes.bsky.social</p>"},{"location":"contact/","title":"Contact","text":"<p>If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch:</p> <p>Email: ehmatthes@gmail.com</p> <p>Mastodon: @ehmatthes@fosstodon.org</p> <p>Bluesky: @ehmatthes.bsky.social</p> <p>If you're curious what I'm up to in the Python world, I write a biweekly newsletter at Mostly Python.</p>"},{"location":"new_in_3e/","title":"What's new in the third edition?","text":"<p>Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section.</p>"},{"location":"new_in_3e/#overall-changes","title":"Overall changes","text":"<p>Here's a summary of the changes that have been made to the book overall:</p> <ul> <li>The third edition uses Python 3.11. (The second edition was written using Python 3.7.)</li> <li>The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years.</li> <li>Code listings are less cluttered and easier to follow throughout the book.</li> <li>The new edition uses updated libraries throughout, and updated workflows for each library.</li> </ul>"},{"location":"new_in_3e/#specific-changes","title":"Specific changes","text":""},{"location":"new_in_3e/#chapter-1","title":"Chapter 1","text":"<ul> <li>In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.)</li> </ul>"},{"location":"new_in_3e/#chapter-2","title":"Chapter 2","text":"<ul> <li>This chapter introduces <code>removeprefix()</code> and <code>removesuffix()</code>, two new methods that are helpful when working with files and URLs.</li> <li>Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong.</li> </ul>"},{"location":"new_in_3e/#chapters-3-9","title":"Chapters 3-9","text":"<ul> <li>Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.)</li> </ul>"},{"location":"new_in_3e/#chapter-10","title":"Chapter 10","text":"<ul> <li>Chapter 10 uses the <code>pathlib</code> module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now.</li> </ul>"},{"location":"new_in_3e/#chapter-11","title":"Chapter 11","text":"<ul> <li><code>pytest</code> is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses <code>pytest</code> instead of the standard library's <code>unittest</code>.</li> <li>This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book.</li> </ul>"},{"location":"new_in_3e/#alien-invasion-chapters-12-14","title":"Alien Invasion (Chapters 12-14)","text":"<ul> <li>The game uses an FPS (frames per second) setting, to make it run more consistently across all systems.</li> <li>The approach to building the alien fleet is simpler and easier to understand.</li> <li>The code listings throughout the project are presented in an order that's easier to follow.</li> </ul>"},{"location":"new_in_3e/#data-visualization-chapters-15-17","title":"Data Visualization (Chapters 15-17)","text":"<ul> <li>Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles.</li> <li>Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach.</li> <li>The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk.</li> <li>The weather and earthquake projects use updated data sets.</li> <li>The GitHub data used in Chapter 17 is fully updated.</li> </ul>"},{"location":"new_in_3e/#web-applications-chapters-18-20","title":"Web Applications (Chapters 18-20)","text":"<ul> <li>The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5.</li> <li>Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project.</li> <li>The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects.</li> </ul>"},{"location":"new_in_3e/#appendices","title":"Appendices","text":"<ul> <li>Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python.</li> <li>Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code.</li> <li>Appendix C includes an updated set of resources for getting help online.</li> <li>Appendix D uses the new <code>git restore</code> command for rolling back changes in a project, and the <code>git switch</code> command for getting back to the main branch in a project.</li> <li>Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them.</li> </ul>"},{"location":"new_in_3e/#index","title":"Index","text":"<ul> <li>The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.</li> </ul>"},{"location":"newsletter/","title":"Newsletter","text":"<p>I write a weekly newsletter called Mostly Python. There are paid subscriptions available to support this ongoing work, but you can also sign up for a free subscription with access to all the same content. (Paid subscribers see some posts before free subscribers, but all posts end up available to everyone within 6 weeks.)</p> <p>Most of what I write will be meaningful to anyone who has worked through a significant portion of Python Crash Course, and is interested in current takes on a variety of topics centered around Python. My goal is to help people transition out of the beginner mindset, and keep up with things that are happening in the Python world.</p> <p>If you're curious to read some posts, you might want to start with one of these:</p> <ul> <li> <p>Python Lists: A closer look</p> <p>This series digs under the hood to see how lists work, and when to consider using a different kind of sequence in your projects.</p> </li> <li> <p>OOP in Python</p> <p>This series takes a deep dive into looking at how object-oriented programming works, and why it's so important.</p> </li> <li> <p>Django from first principles series</p> <p>This series builds a standard Django project by starting with a single .py file.</p> </li> <li> <p>Reader questions</p> <p>This is a collection of posts written in response to questions from readers.</p> </li> <li> <p>Reflections</p> <p>These posts are general reflections on Python, and programming in general. They include little or no code.</p> </li> </ul> <p></p>"},{"location":"survey/","title":"Survey","text":"<p>I\u2019d love to know what you think of Python Crash Course. Your feedback will be used to make ongoing improvements to the book, and to create more resources help people learn Python.</p> <p>If you have a few minutes to share your thoughts, please consider taking a brief survey.</p>"},{"location":"setup_instructions/","title":"Setup Instructions","text":"<p>Setup instructions are included in the book, but sometimes it\u2019s easier to follow online instructions with active links. The sections here also include more screenshots than what can be shown in the book.</p>"},{"location":"setup_instructions/configuring_vs_code/","title":"Configuring VS Code","text":"<p>VS Code is a great text editor, with some features that you'd typically see in an IDE. There are some helpful recommendations for configuring VS Code and using it efficiently in Appendix B. This section shows some of those same configuration steps, with more screenshots.</p>"},{"location":"setup_instructions/configuring_vs_code/#simplifying-output","title":"Simplifying output","text":"<p>By default, VS Code displays output in an integrated terminal. This is a terminal window that's embedded within the VS Code application. It's nice because you don't have to have a separate terminal window open to see your output, but it can be confusing because it displays a lot more information than you might want to see when you're running your first programs.</p> <p>For example, here's what VS Code looks like when you run hello_world.py:</p> <p></p> <p>The output we're really interested in is the single line Hello Python world! The rest of the output shows where the file is being saved, and the path to the  Python interpreter that's being used to run the program. At this point you probably just want to see the output of your program.</p> <p>To see just the output, do the following:</p> <ul> <li>Close all open tabs in VS Code, and quit VS Code.</li> <li>Launch VS Code again and open the folder that contains the Python files you're working on.</li> <li>Click the Run/ Debug icon:</li> </ul> <p></p> <ul> <li>Click Create a launch.json File, and select the Python File option:</li> </ul> <p></p> <p>In the <code>configurations</code> section, change the <code>console</code> setting from <code>integratedTerminal</code> to <code>internalConsole</code>:</p> launch.json<pre><code>{\n    ...\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"internalConsole\"\n        }\n    ]\n}\n</code></pre> <p>Now, run your .py file again and click on the Debug Console tab in the bottom pane. You should see just your program's output:</p> <p></p>"},{"location":"setup_instructions/configuring_vs_code/#running-programs-that-use-input","title":"Running programs that use <code>input()</code>","text":"<p>If you made the above change to display output in the Debug Console instead of the integrated terminal window, you won't be able to run programs that use the <code>input()</code> function. The Debug Console is read-only, which means it doesn't accept input. When you're running programs using the <code>input()</code> function, which is introduced in Chapter 7, you'll need to switch back to using the integrated terminal.</p> <p>To do this, open the launch.json file that you created earlier, and change <code>internalConsole</code> back to <code>integratedTerminal</code>:</p> launch.json<pre><code>{\n    ...\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\"\n        }\n    ]\n}\n</code></pre>"},{"location":"setup_instructions/configuring_vs_code/#switching-between-the-editor-and-the-terminal","title":"Switching between the editor and the terminal","text":"<p>When you're running programs that use <code>input()</code>, you'll need to switch between the editor pane where you're typing code, and the terminal where you'll enter input. You can use a mouse or a trackpad, but there's a keyboard shortcut that's really helpful.</p> <p>When you're finished entering code in the editor pane, press <code>Ctrl-F5</code> to run your program. You'll see a prompt in the terminal pane where you can enter the input for the program. Press <code>Ctrl-`</code> (Control-backtick) to switch from the editor pane to the terminal pane. When you're finished entering input, press <code>Ctrl-`</code> again to move the cursor back to the editor window.</p>"},{"location":"solutions/","title":"Solutions","text":"<p>Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise.</p> <p>I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow, r/learnpython, or get in touch.</p> <ul> <li>Chapter 2</li> <li>Chapter 3</li> <li>Chapter 4</li> <li>Chapter 5</li> <li>Chapter 6</li> <li>Chapter 7</li> <li>Chapter 8</li> <li>Chapter 9</li> <li>Chapter 10</li> <li>Chapter 11</li> <li>Chapter 12</li> <li>Chapter 13</li> <li>Chapter 14</li> <li>Chapter 15</li> <li>Chapter 16</li> <li>Chapter 17</li> <li>Chapter 18</li> <li>Chapter 19</li> <li>Chapter 20</li> </ul>"},{"location":"solutions/#questions-and-feedback","title":"Questions and Feedback","text":"<p>If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it!</p> <p>Email: ehmatthes@gmail.com</p> <p>Mastodon: @ehmatthes@fosstodon.org</p> <p>Bluesky: @ehmatthes.bsky.social</p>"},{"location":"solutions/chapter_10/","title":"Solutions - Chapter 10","text":""},{"location":"solutions/chapter_10/#10-1-learning-python","title":"10-1: Learning Python","text":"<p>Open a blank file in your text editor and write a few lines summarizing what you've learned about Python so far. Start each line with the phrase In Python you can... Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote two times: print the contents once by reading in the entire file, and once by storing the lines in a list and then looping over each line.</p> learning_python.txt<pre><code>In Python you can store as much information as you want.\nIn Python you can connect pieces of information.\nIn Python you can model real-world situations.\n</code></pre> learning_python.py<pre><code>from pathlib import Path\n\nprint(\"--- Reading in the entire file:\")\npath = Path('learning_python.txt')\ncontents = path.read_text()\nprint(contents)\n\nprint(\"\\n--- Looping over the lines:\")\nlines = contents.splitlines()\nfor line in lines:\n    print(line)\n</code></pre> Output:<pre><code>--- Reading in the entire file:\nIn Python you can store as much information as you want.\nIn Python you can connect pieces of information.\nIn Python you can model real-world situations.\n\n--- Looping over the lines:\nIn Python you can store as much information as you want.\nIn Python you can connect pieces of information.\nIn Python you can model real-world situations.\n</code></pre>"},{"location":"solutions/chapter_10/#10-2-learning-c","title":"10-2: Learning C","text":"<p>You can use the <code>replace()</code> method to replace any word in a string with a different word. Here's a quick example showing how to replace <code>'dog'</code> with <code>'cat'</code> in a sentence:</p> <pre><code>&gt;&gt;&gt; message = \"I really like dogs.\"\n&gt;&gt;&gt; message.replace('dog', 'cat')\n'I really like cats.'\n</code></pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p> learning_c.py<pre><code>from pathlib import Path\n\npath = Path('learning_python.txt')\ncontents = path.read_text()\n\nlines = contents.splitlines()\nfor line in lines:\n    line = line.replace('Python', 'C')\n    print(line)\n</code></pre> Output:<pre><code>In C you can store as much information as you want.\nIn C you can connect pieces of information.\nIn C you can model real-world situations.\n</code></pre>"},{"location":"solutions/chapter_10/#10-3-simpler-code","title":"10-3: Simpler Code","text":"<p>The program file_reader.py in this section uses a temporary variable, <code>lines</code>, to show how <code>splitlines()</code> works. You can skip the temporary variable and loop directly over the list that <code>splitlines()</code> returns:</p> <pre><code>for line in contents.splitlines():\n</code></pre> <p>Remove the temporary variable from each of the programs in this section, to make them more concise.</p> simpler_code_file_reader.py<pre><code>from pathlib import Path\n\npath = Path('pi_digits.txt')\ncontents = path.read_text()\n\nfor line in contents.splitlines():\n  print(line)\n</code></pre> Output:<pre><code>3.1415926535\n  8979323846\n  2643383279\n</code></pre> simpler_code_pi_string.py<pre><code>from pathlib import Path\n\npath = Path('pi_million_digits.txt')\ncontents = path.read_text()\n\npi_string = ''\nfor line in contents.splitlines():\n    pi_string += line.lstrip()\n\nprint(f\"{pi_string[:52]}...\")\nprint(len(pi_string))\n</code></pre> Output:<pre><code>3.14159265358979323846264338327950288419716939937510...\n1000002\n</code></pre> simpler_code_pi_birthday.py<pre><code>from pathlib import Path\n\npath = Path('pi_million_digits.txt')\ncontents = path.read_text()\n\npi_string = ''\nfor line in contents.splitlines():\n    pi_string += line.lstrip()\n\nbirthday = input(\"Enter your birthday, in the form mmddyy: \")\nif birthday in pi_string:\n    print(\"Your birthday appears in the first million digits of pi!\")\nelse:\n    print(\"Your birthday does not appear in the first million digits of pi.\")\n</code></pre> Output:<pre><code>Enter your birthday, in the form mmddyy: 040122\nYour birthday appears in the first million digits of pi!\n</code></pre>"},{"location":"solutions/chapter_10/#10-4-guest","title":"10-4: Guest","text":"<p>Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p> guest.py<pre><code>from pathlib import Path\n\npath = Path('guest.txt')\n\nname = input(\"What's your name? \")\npath.write_text(name)\n</code></pre> Output:<pre><code>What's your name? eric\n</code></pre> guest.txt<pre><code>eric\n</code></pre>"},{"location":"solutions/chapter_10/#10-5-guest-book","title":"10-5: Guest Book","text":"<p>Write a <code>while</code> loop that prompts users for their name. Collect all the names that are entered, and then write these names to a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p> guest_book.py<pre><code>from pathlib import Path\n\npath = Path('guest_book.txt')\n\nprompt = \"\\nHi, what's your name? \"\nprompt += \"\\nEnter 'quit' if you're the last guest. \"\n\nguest_names = []\nwhile True:\n    name = input(prompt)\n    if name == 'quit':\n        break\n\n    print(f\"Thanks {name}, we'll add you to the guest book.\")\n    guest_names.append(name)\n\n# Build a string where \"\\n\" is added after each name.\nfile_string = ''\nfor name in guest_names:\n    file_string += f\"{name}\\n\"\n\npath.write_text(file_string)\n</code></pre> Output:<pre><code>Hi, what's your name? \nEnter 'quit' if you're the last guest. eric\nThanks eric, we'll add you to the guest book.\n\nHi, what's your name? \nEnter 'quit' if you're the last guest. erin\nThanks erin, we'll add you to the guest book.\n\nHi, what's your name? \nEnter 'quit' if you're the last guest. ever\nThanks ever, we'll add you to the guest book.\n\nHi, what's your name? \nEnter 'quit' if you're the last guest. willie\nThanks willie, we'll add you to the guest book.\n\nHi, what's your name? \nEnter 'quit' if you're the last guest. quit\n</code></pre> guest_book.txt<pre><code>eric\nerin\never\nwillie\n</code></pre>"},{"location":"solutions/chapter_10/#10-6-addition","title":"10-6: Addition","text":"<p>One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an <code>int</code>, you'll get a <code>ValueError</code>. Write a program that prompts for two numbers. Add them together and print the result. Catch the <code>ValueError</code> if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p> addition.py<pre><code>try:\n    x = input(\"Give me a number: \")\n    x = int(x)\n\n    y = input(\"Give me another number: \")\n    y = int(y)\nexcept ValueError:\n    print(\"Sorry, I really needed a number.\")\nelse:\n    sum = x + y\n    print(f\"The sum of {x} and {y} is {sum}.\")\n</code></pre> Output with two integers:<pre><code>Give me a number: 23\nGive me another number: 47\nThe sum of 23 and 47 is 70.\n</code></pre> Output with non-numerical input:<pre><code>Give me a number: 23\nGive me another number: fred\nSorry, I really needed a number.\n</code></pre>"},{"location":"solutions/chapter_10/#10-7-addition-calculator","title":"10-7: Addition Calculator","text":"<p>Wrap your code from Exercise 10-6 in a <code>while</code> loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p> addition_calculator.py<pre><code>print(\"Enter 'q' at any time to quit.\\n\")\n\nwhile True:\n    try:\n        x = input(\"\\nGive me a number: \")\n        if x == 'q':\n            break\n\n        x = int(x)\n\n        y = input(\"Give me another number: \")\n        if y == 'q':\n            break\n\n        y = int(y)\n\n    except ValueError:\n        print(\"Sorry, I really needed a number.\")\n\n    else:\n        sum = x + y\n        print(f\"The sum of {x} and {y} is {sum}.\")\n</code></pre> Output:<pre><code>Enter 'q' at any time to quit.\n\nGive me a number: 23\nGive me another number: 47\nThe sum of 23 and 47 is 70.\n\nGive me a number: three\nSorry, I really needed a number.\n\nGive me a number: 3\nGive me another number: five\nSorry, I really needed a number.\n\nGive me a number: -12\nGive me another number: 20\nThe sum of -12 and 20 is 8.\n\nGive me a number: q\n</code></pre>"},{"location":"solutions/chapter_10/#10-8-cats-and-dogs","title":"10-8: Cats and Dogs","text":"<p>Make two files, <code>cats.txt</code> and <code>dogs.txt</code>. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p> cats.txt<pre><code>henry\nclarence\nmildred\n</code></pre> dogs.txt<pre><code>willie\nannahootz\nsummit\n</code></pre> cats_and_dogs.py<pre><code>from pathlib import Path\n\nfilenames = ['cats.txt', 'dogs.txt']\n\nfor filename in filenames:\n    print(f\"\\nReading file: {filename}\")\n\n    path = Path(filename)\n    try:\n        contents = path.read_text()\n    except FileNotFoundError:\n        print(\"  Sorry, I can't find that file.\")\n    else:\n        print(contents)\n</code></pre> Output with both files:<pre><code>Reading file: cats.txt\nhenry\nclarence\nmildred\n\nReading file: dogs.txt\nwillie\nannahootz\nsummit\n</code></pre> Output after moving cats.txt:<pre><code>Reading file: cats.txt\n  Sorry, I can't find that file.\n\nReading file: dogs.txt\nwillie\nannahootz\nsummit\n</code></pre>"},{"location":"solutions/chapter_10/#10-9-silent-cats-and-dogs","title":"10-9: Silent Cats and Dogs","text":"<p>Modify your <code>except</code> block in Exercise 10-8 to fail silently if either file is missing.</p> silent_cats_and_dogs.py<pre><code>from pathlib import Path\n\nfilenames = ['cats.txt', 'dogs.txt']\n\nfor filename in filenames:\n    path = Path(filename)\n    try:\n        contents = path.read_text()\n    except FileNotFoundError:\n        pass\n    else:\n        print(f\"\\nReading file: {filename}\")\n        print(contents)\n</code></pre> Output when both files exist:<pre><code>Reading file: cats.txt\nhenry\nclarence\nmildred\n\nReading file: dogs.txt\nwillie\nannahootz\nsummit\n</code></pre> Output when cats.txt has been moved:<pre><code>Reading file: dogs.txt\nwillie\nannahootz\nsummit\n</code></pre>"},{"location":"solutions/chapter_10/#10-10-common-words","title":"10-10: Common Words","text":"<p>Visit Project Gutenberg and find a few texts you'd like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer.</p> <p>You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times <code>'row'</code> appers in a string:</p> <pre><code>&gt;&gt;&gt; line = \"Row, row, row your boat\"\n&gt;&gt;&gt; line.count('row')\n2\n&gt;&gt;&gt; line.lower().count('row')\n3 \n</code></pre> <p>Notice that converting the string to lowercase using <code>lower()</code> catches all appearances of the word you're looking for, regardless of how it's formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word 'the' appears in each text. This will be an approximation because it will also count words such as 'then' and 'there'. Try counting 'the ', with a space in the string, and see how much lower your count is.</p> common_words.py<pre><code>from pathlib import Path\n\ndef count_common_words(filename, word):\n    \"\"\"Count how many times word appears in the text.\"\"\"\n    # Note: This is a really simple approximation, and the number returned\n    #   will be higher than the actual count.\n    path = Path(filename)\n    try:\n        contents = path.read_text()\n    except FileNotFoundError:\n        pass\n    else:\n        word_count = contents.lower().count(word)\n        msg = f\"'{word}' appears in {filename} about {word_count} times.\"\n        print(msg)\n\nfilename = 'alice.txt'\ncount_common_words(filename, 'the')\n</code></pre> Output:<pre><code>'the' appears in alice.txt about 2528 times.\n</code></pre> <p>This solution only examines one text, but the function can be applied to any number of texts.</p>"},{"location":"solutions/chapter_10/#10-11-favorite-number","title":"10-11: Favorite Number","text":"<p>Write a program that prompts for the user's favorite number. Use <code>json.dumps()</code> to store this number in a file. Write a separate program that reads in this value and prints the message, \"I know your favorite number! It's _____.\"</p> favorite_number_writer.py<pre><code>from pathlib import Path\nimport json\n\nnumber = input(\"What's your favorite number? \")\n\npath = Path('favorite_number.json')\ncontents = json.dumps(number)\npath.write_text(contents)\n\nprint(\"Thanks! I'll remember that number.\")\n</code></pre> Output:<pre><code>What's your favorite number? 42\nThanks! I'll remember that number.\n</code></pre> favorite_number_reader.py<pre><code>from pathlib import Path\nimport json\n\npath = Path('favorite_number.json')\ncontents = path.read_text()\nnumber = json.loads(contents)\n\nprint(f\"I know your favorite number! It's {number}.\")\n</code></pre> Output:<pre><code>I know your favorite number! It's 42.\n</code></pre>"},{"location":"solutions/chapter_10/#10-12-favorite-number-remembered","title":"10-12: Favorite Number Remembered","text":"<p>Combine the two programs from Exercise 10-11 into one file. If the number is already stored, report the favorite number to the user. If not, prompt for the user's favorite number and store it in a file. Run the program twice to see that it works.</p> favorite_number_remembered.py<pre><code>from pathlib import Path\nimport json\n\npath = Path('favorite_number.json')\ntry:\n    contents = path.read_text()\nexcept FileNotFoundError:\n    number = input(\"What's your favorite number? \")\n    contents = json.dumps(number)\n    path.write_text(contents)\n    print(\"Thanks, I'll remember that.\")\nelse:\n    number = json.loads(contents)\n    print(f\"I know your favorite number! It's {number}.\")\n</code></pre> Output, first run:<pre><code>What's your favorite number? 42\nThanks, I'll remember that.\n</code></pre> Output, second run:<pre><code>I know your favorite number! It's 42.\n</code></pre>"},{"location":"solutions/chapter_10/#10-13-user-dictionary","title":"10-13: User Dictionary","text":"<p>The remember_me.py example only stores one piece of information, the username. Expand this example by asking for two more pieces of information about the user, then store all the information you collect in a dictionary. Write this dictionary to a file using <code>json.dumps()</code>, and read it back in using <code>json.loads()</code>. Print a summary showing exactly what your program remembers about the user.</p> user_dictionary.py<pre><code>from pathlib import Path\nimport json\n\ndef get_stored_user_info(path):\n    \"\"\"Get stored user info if available.\"\"\"\n    if path.exists():\n        contents = path.read_text()\n        user_dict = json.loads(contents)\n        return user_dict\n    else:\n        return None\n\ndef get_new_user_info(path):\n    \"\"\"Get information from a new user.\"\"\"\n    username = input(\"What is your name? \")\n    game = input(\"What's your favorite game? \")\n    animal = input(\"What's your favorite animal? \")\n\n    user_dict = {\n        'username': username,\n        'game': game,\n        'animal': animal,\n    }\n\n    contents = json.dumps(user_dict)\n    path.write_text(contents)\n    return user_dict\n\ndef greet_user():\n    \"\"\"Greet the user by name, and state what we know about them.\"\"\"\n    path = Path('user_info.json')\n    user_dict = get_stored_user_info(path)\n    if user_dict:\n        print(f\"Welcome back, {user_dict['username']}!\")\n        print(f\"Hope you've been playing some {user_dict['game']}. \")\n        print(f\"Have you seen a {user_dict['animal']} recently?\")\n    else:\n        user_dict = get_new_user_info(path)\n        msg = f\"We'll remember you when you return, {user_dict['username']}!\"\n        print(msg)\n\ngreet_user()\n</code></pre> Output, first run:<pre><code>What is your name? eric\nWhat's your favorite game? chess\nWhat's your favorite animal? mountain goat\nWe'll remember you when you return, eric!\n</code></pre> Output, second run:<pre><code>Welcome back, eric!\nHope you've been playing some chess. \nHave you seen a mountain goat recently?\n</code></pre>"},{"location":"solutions/chapter_10/#10-14-verify-user","title":"10-14: Verify User","text":"<p>The final listing for remember_me.py assumes either that the user has already entered their username or that the program is running for the first time. We should modify it in case the current user is not the person who last used the program.</p> <p>Before printing a welcome back message in <code>greet_user()</code>, ask the user if this is the correct username. If it's not, call <code>get_new_username()</code> to get the correct username.</p> verify_user.py<pre><code>from pathlib import Path\nimport json\n\ndef get_stored_username(path):\n    \"\"\"Get stored username if available.\"\"\"\n    if path.exists():\n        contents = path.read_text()\n        username = json.loads(contents)\n        return username\n    else:\n        return None\n\ndef get_new_username(path):\n    \"\"\"Prompt for a new username.\"\"\"\n    username = input(\"What is your name? \")\n    contents = json.dumps(username)\n    path.write_text(contents)\n    return username\n\ndef greet_user():\n    \"\"\"Greet the user by name.\"\"\"\n    path = Path('username.json')\n    username = get_stored_username(path)\n    if username:\n        correct = input(f\"Are you {username}? (y/n) \")\n        if correct == 'y':\n            print(f\"Welcome back, {username}!\")\n        else:\n            username = get_new_username(path)\n            print(f\"We'll remember you when you come back, {username}!\")    \n    else:\n        username = get_new_username(path)\n        print(f\"We'll remember you when you come back, {username}!\")\n\ngreet_user()\n</code></pre> Output:<pre><code>&gt; python verify_user.py\nWhat is your name? eric\nWe'll remember you when you come back, eric!\n\n&gt; python verify_user.py\nAre you eric? (y/n) y\nWelcome back, eric!\n\n&gt; python verify_user.py\nAre you eric? (y/n) n\nWhat is your name? ever\nWe'll remember you when you come back, ever!\n\n&gt; python verify_user.py\nAre you ever? (y/n) y\nWelcome back, ever!\n</code></pre> <p>You might notice the identical <code>else</code> blocks in this version of <code>greet_user()</code>. One way to clean this function up is to use an empty <code>return</code> statement. An empty <code>return</code> statement tells Python to leave the function without running any more code in the function.</p> <p>Here's a cleaner version of <code>greet_user()</code>:</p> verify_user_clean.py<pre><code>def greet_user():\n    \"\"\"Greet the user by name.\"\"\"\n    path = Path('username.json')\n    username = get_stored_username(path)\n    if username:\n        correct = input(f\"Are you {username}? (y/n) \")\n        if correct == 'y':\n            print(f\"Welcome back, {username}!\")\n            return\n\n    # We got a username, but it's not correct.\n    #   Prompt for a new username.\n    username = get_new_username(path)\n    print(f\"We'll remember you when you come back, {username}!\")\n</code></pre> <p>The <code>return</code> statement means the code in the function stops running after printing the welcome back message. When the username doesn't exist, or the username is incorrect, the <code>return</code> statement is never reached. The second part of the function will only run when the <code>if</code> statements fail, so we don't need an <code>else</code> block. Now the function prompts for a new username when either <code>if</code> statement fails.</p> <p>The only thing left to address is the nested <code>if</code> statements. This can be cleaned up by moving the code that checks whether the username is correct to a separate function. If you're enjoying this exercise, you might try making a new function called <code>check_username()</code> and see if you can remove the nested <code>if</code> statement from <code>greet_user()</code>.</p>"},{"location":"solutions/chapter_11/","title":"Solutions - Chapter 11","text":""},{"location":"solutions/chapter_11/#11-1-city-country","title":"11-1: City, Country","text":"<p>Write a function that accepts two parameters: a city name and a country name. The function should return a single string of the form City, Country, such as <code>Santiago, Chile</code>. Store the function in a module called city_functions.py, and save this file in a new folder so <code>pytest</code> won\u2019t try to run the tests we\u2019ve already written.</p> <p>Create a file called test_cities.py that tests the function you just wrote. Write a function called <code>test_city_country()</code> to verify that calling your function with values such as <code>'santiago'</code> and <code>'chile'</code> results in the correct string. Run the test, and make sure <code>test_city_country()</code> passes.</p> city_country/city_functions.py<pre><code>\"\"\"A collection of functions for working with cities.\"\"\"\n\ndef city_country(city, country):\n    \"\"\"Return a string like 'Santiago, Chile'.\"\"\"\n    return f\"{city.title()}, {country.title()}\"\n</code></pre> <p>Note: This is the same function we wrote in Exercise 8-6.</p> city_country/test_cities.py<pre><code>from city_functions import city_country\n\ndef test_city_country():\n    \"\"\"Does a simple city and country pair work?\"\"\"\n    santiago_chile = city_country('santiago', 'chile')\n    assert santiago_chile == 'Santiago, Chile'\n</code></pre> Output:<pre><code>city_country $ pytest\n============================ test session starts =============================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /.../solution_files/chapter_11/city_country\ncollected 1 item                                                             \n\ntest_cities.py .                                                       [100%]\n============================= 1 passed in 0.01s ==============================\n</code></pre>"},{"location":"solutions/chapter_11/#11-2-population","title":"11-2: Population","text":"<p>Modify your function so it requires a third parameter, <code>population</code>. It should now return a single string of the form <code>City, Country - population xxx</code>, such as <code>Santiago, Chile - population 5000000</code>. Run test_cities.py again. Make sure <code>test_city_country()</code> fails this time.</p> <p>Modify the function so the <code>population</code> parameter is optional. Run the test, and make sure <code>test_city_country()</code> passes again.</p> <p>Write a second test called <code>test_city_country_population()</code> that verifies you can call your function with the values <code>'santiago'</code>, <code>'chile'</code>, and <code>'population=5000000'</code>. Run the tests one more time, and make sure this new test passes.</p> population/city_functions.py<pre><code>\"\"\"A collection of functions for working with cities.\"\"\"\n\ndef city_country(city, country, population):\n    \"\"\"Return a string like 'Santiago, Chile - population 5000000'.\"\"\"\n    output_string = f\"{city.title()}, {country.title()}\"\n    output_string += f\" -population {population}\"\n    return output_string\n</code></pre> Output:<pre><code>population $ pytest\n============================ test session starts =============================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /.../solution_files/chapter_11/population\ncollected 1 item                                                             \n\ntest_cities.py F                                                       [100%]\n\n================================== FAILURES ==================================\n_____________________________ test_city_country ______________________________\n\n    def test_city_country():\n        \"\"\"Does a simple city and country pair work?\"\"\"\n&gt;       santiago_chile = city_country('santiago', 'chile')\nE       TypeError: city_country() missing 1 required positional argument: 'population'\n\ntest_cities.py:5: TypeError\n========================== short test summary info ===========================\nFAILED test_cities.py::test_city_country - TypeError: city_country() missin...\n============================= 1 failed in 0.09s ==============================\n</code></pre> population/city_functions_optional.py<pre><code>\"\"\"A collection of functions for working with cities.\"\"\"\n\ndef city_country(city, country, population=0):\n    \"\"\"Return a string representing a city-country pair.\"\"\"\n\n    output_string = f\"{city.title()}, {country.title()}\"\n    if population:\n        output_string += f\" - population {population}\"\n    return output_string\n</code></pre> Output:<pre><code>population $ pytest\n============================ test session starts =============================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /.../solution_files/chapter_11/population\ncollected 1 item                                                             \n\ntest_cities.py .                                                       [100%]\n============================= 1 passed in 0.01s ==============================\n</code></pre> population/test_cities.py<pre><code>from city_functions_pop_optional import city_country\n\ndef test_city_country():\n    \"\"\"Does a simple city and country pair work?\"\"\"\n    santiago_chile = city_country('santiago', 'chile')\n    assert santiago_chile == 'Santiago, Chile'\n\ndef test_city_country_population():\n    \"\"\"Can I include a population argument?\"\"\"\n    santiago_chile = city_country('santiago', 'chile', population=5_000_000)\n    assert santiago_chile == 'Santiago, Chile - population 5000000'\n</code></pre> <p>Note: I have two versions of the <code>city_functions.py</code> module saved in the solution files, so the <code>import</code> statement here has changed to use the updated version of the function.</p> Output:<pre><code>population $ pytest\n============================ test session starts =============================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /.../solution_files/chapter_11/population\ncollected 2 items                                                            \n\ntest_cities.py ..                                                      [100%]\n============================= 2 passed in 0.01s ==============================\n</code></pre>"},{"location":"solutions/chapter_11/#11-3-employee","title":"11-3: Employee","text":"<p>Write a class called <code>Employee</code>. The <code>__init__()</code> method should take in a first name, a last name, and an annual salary, and store each of these as attributes. Write a method called <code>give_raise()</code> that adds $5000 to the annual salary by default but also accepts a different raise amount.</p> <p>Write a test file for <code>Employee</code> with two test functions, <code>test_give_default_raise()</code> and <code>test_give_custom_raise()</code>. Write your tests once without using a fixture, and make sure they both pass. Then write a fixture so you don\u2019t have to create a new employee instance in each test function. Run the tests again, and make sure both tests still pass.</p> employee/employee.py<pre><code>class Employee:\n    \"\"\"A class to represent an employee.\"\"\"\n\n    def __init__(self, f_name, l_name, salary):\n        \"\"\"Initialize the employee.\"\"\"\n        self.first = f_name.title()\n        self.last = l_name.title()\n        self.salary = salary\n\n    def give_raise(self, amount=5000):\n        \"\"\"Give the employee a raise.\"\"\"\n        self.salary += amount\n</code></pre> employee/test_employee.py<pre><code>from employee import Employee\n\ndef test_give_default_raise():\n    \"\"\"Test that a default raise works correctly.\"\"\"\n    employee = Employee('eric', 'matthes', 65_000)\n    employee.give_raise()\n    assert employee.salary == 70_000\n\ndef test_give_custom_raise():\n    \"\"\"Test that a custom raise works correctly.\"\"\"\n    employee = Employee('eric', 'matthes', 65_000)\n    employee.give_raise(10000)\n    assert employee.salary == 75_000\n</code></pre> Output:<pre><code>employee $ pytest\n============================ test session starts =============================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /.../solution_files/chapter_11/employee\ncollected 2 items                                                            \n\ntest_employee.py ..                                                    [100%]\n============================= 2 passed in 0.01s ==============================\n</code></pre> employee_with_fixture/employee.py<pre><code>class Employee:\n    \"\"\"A class to represent an employee.\"\"\"\n\n    def __init__(self, f_name, l_name, salary):\n        \"\"\"Initialize the employee.\"\"\"\n        self.first = f_name.title()\n        self.last = l_name.title()\n        self.salary = salary\n\n    def give_raise(self, amount=5000):\n        \"\"\"Give the employee a raise.\"\"\"\n        self.salary += amount\n</code></pre> employee_with_fixture/test_employee.py<pre><code>import pytest\n\nfrom employee import Employee\n\n@pytest.fixture\ndef employee():\n    \"\"\"An Employee object that will be available to all test functions.\"\"\"\n    employee = Employee('eric', 'matthes', 65_000)\n    return employee\n\ndef test_give_default_raise(employee):\n    \"\"\"Test that a default raise works correctly.\"\"\"\n    employee.give_raise()\n    assert employee.salary == 70_000\n\ndef test_give_custom_raise(employee):\n    \"\"\"Test that a custom raise works correctly.\"\"\"\n    employee.give_raise(10000)\n    assert employee.salary == 75_000\n</code></pre> Output:<pre><code>employee_with_fixture $ pytest\n============================ test session starts =============================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /.../solution_files/chapter_11/employee_with_fixture\ncollected 2 items                                                            \n\ntest_employee.py ..                                                    [100%]\n============================= 2 passed in 0.01s ==============================\n</code></pre>"},{"location":"solutions/chapter_12/","title":"Solutions - Chapter 12","text":"<p>There are a few things that can be helpful to know as you work on the exercises for Chapters 12-14:</p> <ul> <li>The solutions for Chapters 12-14 are kept in the solution_files directory, because every exercise is a mini project. These pages contain links to individual solutions in the repository.</li> <li>If you make a mistake when working through the project and can't get it back to a working state, it can be really frustrating to start over from scratch. There are some resources that can help with this:<ul> <li>In the online resources, there's a complete version of the Alien Invasion project as it looks at the end of each main section in Chapters 12-14.</li> <li>For example if you're working on getting the ship to move and everything stops working, you can look at the versions from Chapter 12, then click on the adding_ship_image folder, and you'll have a working copy of the project as it looks at the beginning of the section about making the ship move.</li> <li>If you want to compare your files to what they should look like at the end of the Piloting the Ship section, click on the piloting_the_ship folder.</li> <li>If you want to know how to make snapshots of a project like this, make time to work through Appendix D, Using Git for Version Control. It will be well worth your time, and it's something you'll use your whole life as a programmer.</li> </ul> </li> <li>If you haven't already seen the cheat sheets, there's a sheet that focuses on Pygame which might be helpful when working on these exercises. (These will be fully updated to match the third edition shortly, but the Pygame sheets will not change much.)</li> <li>It can be helpful to look through some of the Pygame documentation as you work on these exercises. There are also direct links to specific pages in the documentation that are helpful for certain exercises.</li> </ul>"},{"location":"solutions/chapter_12/#12-1-blue-sky","title":"12-1: Blue Sky","text":"<p>Make a Pygame window with a blue background.</p> <p>Solution</p>"},{"location":"solutions/chapter_12/#12-2-game-character","title":"12-2: Game Character","text":"<p>Find a bitmap image of a game character you like or convert an image to a bitmap. Make a class that draws the character at the center of the screen, then match the background color of the image to the background color of the screen or vice versa.</p> <p>Solution</p>"},{"location":"solutions/chapter_12/#12-4-rocket","title":"12-4: Rocket","text":"<p>Make a game that begins with a rocket in the center of the screen. Allow the player to move the rocket up, down, left, or right using the four arrow keys. Make sure the rocket never moves beyond any edge of the screen.</p> <p>Solution</p>"},{"location":"solutions/chapter_12/#12-5-keys","title":"12-5: Keys","text":"<p>Make a Pygame file that creates an empty screen. In the event loop, print the <code>event.key</code> attribute whenever a <code>pygame.KEYDOWN</code> event is detected. Run the program and press various keys to see how Pygame responds.</p> <p>Note: When you're working on this exercise, it can be helpful to look at the documentation for <code>pygame.key</code>. Also, if you run the solution code shown here, you'll get the integer code for each key. That is expected, even though we use the constant that's mapped to these values, such as <code>pygame.K_q</code> or <code>pygame.K_SPACE</code>.</p> <p>Solution</p>"},{"location":"solutions/chapter_12/#12-6-sideways-shooter","title":"12-6: Sideways Shooter","text":"<p>Write a game that places a ship on the left side of the screen and allows the player to move the ship up and down. Make the ship fire a bullet that travels right across the screen when the player presses the spacebar. Make sure bullets are deleted once they disappear off the screen.</p> <p>Solution</p>"},{"location":"solutions/chapter_13/","title":"Solutions - Chapter 13","text":"<p>There are a few things that can be helpful to know as you work on the exercises for Chapters 12-14:</p> <ul> <li>The solutions for Chapters 12-14 are kept in the solution_files directory, because every exercise is a mini project. These pages contain links to individual solutions in the repository.</li> <li>If you make a mistake when working through the project and can't get it back to a working state, it can be really frustrating to start over from scratch. There are some resources that can help with this:<ul> <li>In the online resources, there's a complete version of the Alien Invasion project as it looks at the end of each main section in Chapters 12-14.</li> <li>For example if you're working on getting the ship to move and everything stops working, you can look at the versions from Chapter 12, then click on the adding_ship_image folder, and you'll have a working copy of the project as it looks at the beginning of the section about making the ship move.</li> <li>If you want to compare your files to what they should look like at the end of the Piloting the Ship section, click on the piloting_the_ship folder.</li> <li>If you want to know how to make snapshots of a project like this, make time to work through Appendix D, Using Git for Version Control. It will be well worth your time, and it's something you'll use your whole life as a programmer.</li> </ul> </li> <li>If you haven't already seen the cheat sheets, there's a sheet that focuses on Pygame which might be helpful when working on these exercises. (These will be fully updated to match the third edition shortly, but the Pygame sheets will not change much.)</li> <li>It can be helpful to look through some of the Pygame documentation as you work on these exercises. There are also direct links to specific pages in the documentation that are helpful for certain exercises.</li> </ul>"},{"location":"solutions/chapter_13/#13-1-stars","title":"13-1: Stars","text":"<p>Find an image of a star. Make a grid of stars appear on the screen.</p> <p>Solution</p>"},{"location":"solutions/chapter_13/#13-2-better-stars","title":"13-2: Better Stars","text":"<p>You can make a more realistic star pattern by introducing randomness when you place each star. Recall from Chapter 9 that you can get a random number like this:</p> <pre><code>from random import randint\nrandom_number = randint(-10, 10)\n</code></pre> <p>This code returns a random integer between \u221210 and 10. Using your code in Exercise 13-1, adjust each star\u2019s position by a random amount.</p> <p>Note: This is a basic solution that shows working code to solve this exercise. If you want, you can experiment with different size stars, different spacing values, and different values for the amount of randomness in each star's position. From my experimentation this effect seems to work better with a relatively dense field of smaller stars.</p> <p>Solution</p> <p>Note: Here's an entirely different approach to creating a random field of stars. Instead of making a grid with some offsets, each star is randomly placed somewhere on the screen, up to a total number of stars.</p> <p>Solution</p>"},{"location":"solutions/chapter_13/#13-3-raindrops","title":"13-3: Raindrops","text":"<p>Find an image of a raindrop and create a grid of raindrops. Make the raindrops fall toward the bottom of the screen until they disappear.</p> <p>Solution</p>"},{"location":"solutions/chapter_13/#13-4-steady-rain","title":"13-4: Steady Rain","text":"<p>Modify your code in Exercise 13-3 so when a row of raindrops disappears off the bottom of the screen, a new row appears at the top of the screen and begins to fall.</p> <p>Note: This is a simple working solution as well, and has not been optimized. If you like this exercise I encourage you to experiment with different size drops, different approaches to defining the starting position for each drop, and different approaches to creating new rows of raindrops.</p> <p>Solution</p>"},{"location":"solutions/chapter_13/#13-5-sideways-shooter-part-2","title":"13-5: Sideways Shooter Part 2","text":"<p>We\u2019ve come a long way since Exercise 12-6, Sideways Shooter. For this exercise, try to develop Sideways Shooter to the same point we\u2019ve brought Alien Invasion to. Add a fleet of aliens, and make them move sideways toward the ship. Or, write code that places aliens at random positions along the right side of the screen and then sends them toward the ship. Also, write code that makes the aliens disappear when they\u2019re hit.</p> <p>Note: This is a solution to the version that sends individual aliens across the screen at random intervals.</p> <p>Solution</p>"},{"location":"solutions/chapter_13/#13-6-game-over","title":"13-6: Game Over","text":"<p>In Sideways Shooter, keep track of the number of times the ship is hit and the number of times an alien is hit by the ship. Decide on an appropriate condition for ending the game, and stop the game when this situation occurs.</p> <p>Solution</p>"},{"location":"solutions/chapter_14/","title":"Solutions - Chapter 14","text":"<p>There are a few things that can be helpful to know as you work on the exercises for Chapters 12-14:</p> <ul> <li>The solutions for Chapters 12-14 are kept in the solution_files directory, because every exercise is a mini project. These pages contain links to individual solutions in the repository.</li> <li>If you make a mistake when working through the project and can't get it back to a working state, it can be really frustrating to start over from scratch. There are some resources that can help with this:<ul> <li>In the online resources, there's a complete version of the Alien Invasion project as it looks at the end of each main section in Chapters 12-14.</li> <li>For example if you're working on getting the ship to move and everything stops working, you can look at the versions from Chapter 12, then click on the adding_ship_image folder, and you'll have a working copy of the project as it looks at the beginning of the section about making the ship move.</li> <li>If you want to compare your files to what they should look like at the end of the Piloting the Ship section, click on the piloting_the_ship folder.</li> <li>If you want to know how to make snapshots of a project like this, make time to work through Appendix D, Using Git for Version Control. It will be well worth your time, and it's something you'll use your whole life as a programmer.</li> </ul> </li> <li>If you haven't already seen the cheat sheets, there's a sheet that focuses on Pygame which might be helpful when working on these exercises. (These will be fully updated to match the third edition shortly, but the Pygame sheets will not change much.)</li> <li>It can be helpful to look through some of the Pygame documentation as you work on these exercises. There are also direct links to specific pages in the documentation that are helpful for certain exercises.</li> </ul>"},{"location":"solutions/chapter_14/#14-1-press-p-to-play","title":"14-1: Press P to Play","text":"<p>Because Alien Invasion uses keyboard input to control the ship, it would be useful to start the game with a keypress. Add code that lets the player press P to start. It might help to move some code from <code>_check_play_button()</code> to a <code>_start_game()</code> method that can be called from <code>_check_play_button()</code> and <code>_check_keydown_events()</code>.</p> <p>Solution</p>"},{"location":"solutions/chapter_14/#14-2-target-practice","title":"14-2: Target Practice","text":"<p>Create a rectangle at the right edge of the screen that moves up and down at a steady rate. Then on the left side of the screen, create a ship that the player can move up and down while firing bullets at the rectangular target. Add a Play button that starts the game, and when the player misses the target three times, end the game and make the Play button reappear. Let the player restart the game with this Play button.</p> <p>Solution</p>"},{"location":"solutions/chapter_14/#14-3-challenging-target-practice","title":"14-3: Challenging Target Practice","text":"<p>Start with your work from Exercise 14-2 (page 283). Make the target move faster as the game progresses, and restart the target at the original speed when the player clicks Play.</p> <p>Solution</p>"},{"location":"solutions/chapter_14/#14-4-difficulty-levels","title":"14-4: Difficulty Levels","text":"<p>Make a set of buttons for Alien Invasion that allows the player to select an appropriate starting difficulty level for the game. Each button should assign the appropriate values for the attributes in <code>Settings</code> needed to create different difficulty levels.</p> <p>There are two solutions for this exercise. The first solution has simple difficulty buttons that change the game's settings, but don't change color when you click them. You may also be interested in a slightly more complex solution which highlights the button that indicates the current difficulty settings.</p>"},{"location":"solutions/chapter_14/#14-5-all-time-high-score","title":"14-5: All-Time High Score","text":"<p>The high score is reset every time a player closes and restarts Alien Invasion. Fix this by writing the high score to a file before calling <code>sys.exit()</code> and reading in the high score when initializing its value in <code>GameStats</code>.</p> <p>Solution</p>"},{"location":"solutions/chapter_14/#14-6-refactoring","title":"14-6: Refactoring","text":"<p>Look for methods that are doing more than one task, and refactor them to organize your code and make it efficient. For example, move some of the code in <code>_check_bullet_alien_collisions()</code>, which starts a new level when the fleet of aliens has been destroyed, to a function called <code>start_new_level()</code>. Also, move the four separate method calls in the <code>__init__()</code> method in <code>Scoreboard</code> to a method called <code>prep_images()</code> to shorten <code>__init__()</code>. The <code>prep_images()</code> method could also help simplify <code>_check_play_button()</code> or <code>start_game()</code> if you\u2019ve already refactored <code>_check_play_button()</code>.</p> <p>Note: Before attempting to refactor the project, see Appendix D to learn how to restore the project to a working state if you introduce bugs while refactoring.</p> <p>Solution</p>"},{"location":"solutions/chapter_14/#14-7-expanding-the-game","title":"14-7: Expanding the Game","text":"<p>Think of a way to expand Alien Invasion. For example, you could program the aliens to shoot bullets down at your ship. You can also add shields for your ship to hide behind, which can be destroyed by bullets from either side. Or you can use something like the <code>pygame.mixer</code> module to add sound effects, such as explosions and shooting sounds.</p> <p>For a guide on how to add sounds, see here. You can also automate game play, and watch your computer play Alien Invasion.</p>"},{"location":"solutions/chapter_15/","title":"Solutions - Chapter 15","text":""},{"location":"solutions/chapter_15/#15-1-cubes","title":"15-1: Cubes","text":"<p>A number raised to the third power is a cube. Plot the first five cubic numbers, and then plot the first 5,000 cubic numbers.</p> cubes_5.py<pre><code>import matplotlib.pyplot as plt\n\n# Define data.\nx_values = [1, 2, 3, 4, 5]\ncubes = [1, 8, 27, 64, 125]\n\n# Make plot.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.scatter(x_values, cubes, s=40)\n\n# Set chart title and label axes.\nax.set_title(\"Cubes\", fontsize=24)\nax.set_xlabel('Value', fontsize=14)\nax.set_ylabel('Cube of Value', fontsize=14)\n\n# Set size of tick labels.\nax.tick_params(axis='both', labelsize=14)\n\n# Show plot.\nplt.show()\n</code></pre> <p>Output:</p> <p></p> <p>Plotting 5000 cubes:</p> cubes_5000.py<pre><code>import matplotlib.pyplot as plt\n\n# Define data.\nx_values = range(1, 5001)\ny_values = [x**3 for x in x_values]\n\n# Make plot.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues, s=10)\n\n# Set chart title and label axes.\nax.set_title(\"Cubes\", fontsize=24)\nax.set_xlabel('Value', fontsize=14)\nax.set_ylabel('Cube of Value', fontsize=14)\n\n# Set size of tick labels.\nax.tick_params(axis='both', labelsize=14)\n\n# Show plot.\nplt.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_15/#15-2-colored-cubes","title":"15-2: Colored Cubes","text":"<p>Apply a colormap to your cubes plot.</p> colored_cubes.py<pre><code>import matplotlib.pyplot as plt\n\n# Define data.\nx_values = range(1, 5001)\ny_values = [x**3 for x in x_values]\n\n# Make plot.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues, s=10)\n\n# Set chart title and label axes.\nax.set_title(\"Cubes\", fontsize=24)\nax.set_xlabel('Value', fontsize=14)\nax.set_ylabel('Cube of Value', fontsize=14)\n\n# Set size of tick labels.\nax.tick_params(axis='both', labelsize=14)\n\n# Show plot.\nplt.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_15/#15-3-molecular-motion","title":"15-3: Molecular Motion","text":"<p>Modify rw_visual.py by replacing <code>ax.scatter()</code> with <code>ax.plot()</code>. To simulate the path of a pollen grain on the surface of a drop of water, pass in the <code>rw.x_values</code> and <code>rw.y_values</code>, and include a <code>linewidth</code> argument. Use 5,000 instead of 50,000 points to keep the plot from being too busy.</p> molecular_motion.py<pre><code>import matplotlib.pyplot as plt\n\nfrom random_walk import RandomWalk\n\n# Make a random walk.\nrw = RandomWalk(5_000)\nrw.fill_walk()\n\n# Plot the points in the walk.\nplt.style.use('classic')\nfig, ax = plt.subplots()\npoint_numbers = range(rw.num_points)\nax.plot(rw.x_values, rw.y_values, linewidth=1)\nax.set_aspect('equal')\n\n# Emphasize the first and last points.\nax.scatter(0, 0, c='green', edgecolors='none', s=100)\nax.scatter(rw.x_values[-1], rw.y_values[-1], c='red', edgecolors='none',\n        s=100)\n\n# Remove the axes.\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n\nplt.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_15/#15-5-refactoring","title":"15-5: Refactoring","text":"<p>The <code>fill_walk()</code> method is lengthy. Create a new method called <code>get_step()</code> to determine the direction and distance for each step, and then calculate the step. You should end up with two calls to <code>get_step()</code> in <code>fill_walk()</code>:</p> <pre><code>x_step = self.get_step()\ny_step = self.get_step()\n</code></pre> <p>This refactoring should reduce the size of <code>fill_walk()</code> and make the method easier to read and understand.</p> random_walk_refactored.py<pre><code>from random import choice\n\n\nclass RandomWalk:\n    \"\"\"A class to generate random walks.\"\"\"\n\n    def __init__(self, num_points=5000):\n        \"\"\"Initialize attributes of a walk.\"\"\"\n        self.num_points = num_points\n\n        # All walks start at (0, 0).\n        self.x_values = [0]\n        self.y_values = [0]\n\n    def fill_walk(self):\n        \"\"\"Calculate all the points in the walk.\"\"\"\n        # Keep taking steps until the walk reaches the desired length.\n        while len(self.x_values) &lt; self.num_points:\n\n            # Decide which direction to go, and how far to go.\n            x_step = self.get_step()\n            y_step = self.get_step()\n\n            # Reject moves that go nowhere.\n            if x_step == 0 and y_step == 0:\n                continue\n\n            # Calculate the new position.\n            x = self.x_values[-1] + x_step\n            y = self.y_values[-1] + y_step\n\n            self.x_values.append(x)\n            self.y_values.append(y)\n\n    def get_step(self):\n        \"\"\"Calculate a single step in the walk.\"\"\"\n        direction = choice([1, -1])\n        distance = choice([0, 1, 2, 3, 4])\n        step = direction * distance\n\n        return step\n</code></pre>"},{"location":"solutions/chapter_15/#15-6-two-d8s","title":"15-6: Two D8s","text":"<p>Create a simulation showing what happens when you roll two eight-sided dice 1,000 times. Try to picture what you think the visualization will look like before you run the simulation, then see if your intuition was correct. Gradually increase the number of rolls until you start to see the limits of your system\u2019s capabilities.</p> two_d8.py<pre><code>import plotly.express as px\n\nfrom die import Die\n\n\n# Create two D8s.\ndie_1 = Die(8)\ndie_2 = Die(8)\n\n# Make some rolls, and store results in a list.\nresults = []\nfor roll_num in range(50_000):\n    result = die_1.roll() + die_2.roll()\n    results.append(result)\n\n# Analyze the results.\nfrequencies = []\nmax_result = die_1.num_sides + die_2.num_sides\nposs_results = range(2, max_result+1)\nfor value in poss_results:\n    frequency = results.count(value)\n    frequencies.append(frequency)\n\n# Visualize the results.\ntitle = \"Results of Rolling two D8s 50,000 Times\"\nlabels = {'x': 'Result', 'y': 'Frequency of Result'}\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\n\n# Further customize chart.\nfig.update_layout(xaxis_dtick=1)\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_15/#15-7-three-dice","title":"15-7: Three Dice","text":"<p>When you roll three D6 dice, the smallest number you can roll is 3 and the largest number is 18. Create a visualization that shows what happens when you roll three D6 dice.</p> three_dice.py<pre><code>import plotly.express as px\n\nfrom die import Die\n\n\n# Create three D6s.\ndie_1 = Die()\ndie_2 = Die()\ndie_3 = Die()\n\n# Make some rolls, and store results in a list.\nresults = []\nfor roll_num in range(50_000):\n    result = die_1.roll() + die_2.roll() + die_3.roll()\n    results.append(result)\n\n# Analyze the results.\nfrequencies = []\nmax_result = die_1.num_sides + die_2.num_sides + die_3.num_sides\nposs_results = range(3, max_result+1)\nfor value in poss_results:\n    frequency = results.count(value)\n    frequencies.append(frequency)\n\n# Visualize the results.\ntitle = \"Results of Rolling three D6s 50,000 Times\"\nlabels = {'x': 'Result', 'y': 'Frequency of Result'}\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\n\n# Further customize chart.\nfig.update_layout(xaxis_dtick=1)\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_15/#15-8-multiplication","title":"15-8: Multiplication","text":"<p>When you roll two dice, you usually add the two numbers together to get the result. Create a visualization that shows what happens if you multiply these numbers by each other instead.</p> multiplication.py<pre><code>import plotly.express as px\n\nfrom die import Die\n\n\n# Create two D6s.\ndie_1 = Die()\ndie_2 = Die()\n\n# Make some rolls, and store results in a list.\nresults = []\nfor roll_num in range(50_000):\n    result = die_1.roll() * die_2.roll()\n    results.append(result)\n\n# Analyze the results.\nfrequencies = []\nmax_result = die_1.num_sides * die_2.num_sides\nposs_results = range(1, max_result+1)\nfor value in poss_results:\n    frequency = results.count(value)\n    frequencies.append(frequency)\n\n# Visualize the results.\ntitle = \"Results of Multiplying Two D8s 50,000 Times\"\nlabels = {'x': 'Result', 'y': 'Frequency of Result'}\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\n\n# Further customize chart.\nfig.update_layout(xaxis_dtick=1)\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_15/#15-9-die-comprehensions","title":"15-9: Die Comprehensions","text":"<p>For clarity, the listings in this section use the long form of <code>for</code> loops. If you\u2019re comfortable using list comprehensions, try writing a comprehension for one or both of the loops in each of these programs.</p> die_comprehension.py<pre><code>import plotly.express as px\n\nfrom die import Die\n\n\n# Create a D6 and a D10.\ndie_1 = Die()\ndie_2 = Die(10)\n\n# Make some rolls, and store results in a list.\nresults = [die_1.roll() + die_2.roll() for roll_num in range(50_000)]\n\n# Analyze the results.\nmax_result = die_1.num_sides + die_2.num_sides\nposs_results = range(2, max_result+1)\n\nfrequencies = [results.count(value) for value in poss_results]\n\n# Visualize the results.\ntitle = \"Results of Rolling a D6 and a D10 50,000 Times\"\nlabels = {'x': 'Result', 'y': 'Frequency of Result'}\nfig = px.bar(x=poss_results, y=frequencies, title=title, labels=labels)\n\n# Further customize chart.\nfig.update_layout(xaxis_dtick=1)\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_16/","title":"Solutions - Chapter 16","text":""},{"location":"solutions/chapter_16/#16-1-sitka-rainfall","title":"16-1: Sitka Rainfall","text":"<p>Sitka is located in a temperate rainforest, so it gets a fair amount of rainfall. In the data file sitka_weather_2021_full.csv is a header called <code>PRCP</code>, which represents daily rainfall amounts. Make a visualization focusing on the data in this column. You can repeat the exercise for Death Valley if you\u2019re curious how little rainfall occurs in a desert.</p> sitka_rainfall.py<pre><code>from pathlib import Path\nimport csv\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n\n\npath = Path('weather_data/sitka_weather_2021_full.csv')\nlines = path.read_text().splitlines()\n\nreader = csv.reader(lines)\nheader_row = next(reader)\n\n# Extract dates and rainfall amounts\ndates, precips = [], []\nfor row in reader:\n    current_date = datetime.strptime(row[2], '%Y-%m-%d')\n    precip = float(row[5])\n    dates.append(current_date)\n    precips.append(precip)\n\n# Plot the high temperatures.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.bar(dates, precips, color='blue')\n\n# Format plot.\nax.set_title(\"Daily Precipitation, 2021\", fontsize=24)\nax.set_xlabel('', fontsize=16)\nfig.autofmt_xdate()\nax.set_ylabel(\"Precipitation Amount (in)\", fontsize=16)\nax.tick_params(labelsize=16)\n\nplt.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_16/#16-2-sitkadeath-valley-comparison","title":"16-2: Sitka\u2013Death Valley Comparison","text":"<p>The temperature scales on the Sitka and Death Valley graphs reflect the different data ranges. To accurately compare the temperature range in Sitka to that of Death Valley, you need identical scales on the y-axis. Change the settings for the y-axis on one or both of the charts in Figures 16-5 and 16-6. Then make a direct comparison between temperature ranges in Sitka and Death Valley (or any two places you want to compare).</p> <p>The <code>set_ylim()</code> method allows you to set the limits of just the y-axis. If you ever need to specify the limits of the x-axis, there\u2019s a corresponding <code>set_xlim()</code> function as well.</p> sitka_highs_lows_comparison.py<pre><code>from pathlib import Path\nimport csv\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n\n\npath = Path('weather_data/sitka_weather_2021_simple.csv')\nlines = path.read_text().splitlines()\n\nreader = csv.reader(lines)\nheader_row = next(reader)\n\n# Extract dates, and high and low temperatures.\ndates, highs, lows = [], [], []\nfor row in reader:\n    current_date = datetime.strptime(row[2], '%Y-%m-%d')\n    high = int(row[4])\n    low = int(row[5])\n    dates.append(current_date)\n    highs.append(high)\n    lows.append(low)\n\n# Plot the high and low temperatures.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.plot(dates, highs, color='red', alpha=0.5)\nax.plot(dates, lows, color='blue', alpha=0.5)\nax.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1)\n\n# Format plot.\nax.set_title(\"Daily High and Low Temperatures, 2021\", fontsize=24)\nax.set_xlabel('', fontsize=16)\nfig.autofmt_xdate()\nax.set_ylabel(\"Temperature (F)\", fontsize=16)\nax.tick_params(labelsize=16)\nax.set_ylim(10, 140)\n\nplt.show()\n</code></pre> <p>Output:</p> <p></p> <p>Using the same limits for the <code>ylim()</code> method with the Death Valley data results in a chart that has the same scale:</p> <p></p> <p>There are a number of ways you can approach plotting both data sets on the same chart. In the following solution, we put the code for reading the csv file into a function. We then call it once to grab the highs and lows for Sitka before making the chart, and then call the function a second time to add Death Valley\u2019s data to the existing plot. The colors have been adjusted slightly to make each location\u2019s data distinct.</p> sitka_death_valley_comparison.py<pre><code>from pathlib import Path\nimport csv\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n\n\ndef get_weather_data(path, dates, highs, lows, date_index, high_index,\n        low_index):\n    \"\"\"Get the highs and lows from a data file.\"\"\"\n    lines = path.read_text().splitlines()\n    reader = csv.reader(lines)\n    header_row = next(reader)\n\n    # Extract dates, and high and low temperatures.\n    for row in reader:\n        current_date = datetime.strptime(row[date_index], '%Y-%m-%d')\n        try:\n            high = int(row[high_index])\n            low = int(row[low_index])\n        except ValueError:\n            print(f\"Missing data for {current_date}\")\n        else:\n            dates.append(current_date)\n            highs.append(high)\n            lows.append(low)\n\n# Get weather data for Sitka.\npath = Path('weather_data/sitka_weather_2021_simple.csv')\ndates, highs, lows = [], [], []\nget_weather_data(path, dates, highs, lows, date_index=2, high_index=4,\n        low_index=5)\n\n# Plot weather data for Sitka.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.plot(dates, highs, color='red', alpha=0.6)\nax.plot(dates, lows, color='blue', alpha=0.6)\nax.fill_between(dates, highs, lows, facecolor='blue', alpha=0.15)\n\n# Get weather data for Death Valley.\npath = Path('weather_data/death_valley_2021_simple.csv')\ndates, highs, lows = [], [], []\nget_weather_data(path, dates, highs, lows, date_index=2, high_index=3,\n        low_index=4)\n\n# Add Death Valley weather data to current plot.\nax.plot(dates, highs, color='red', alpha=0.3)\nax.plot(dates, lows, color='blue', alpha=0.3)\nax.fill_between(dates, highs, lows, facecolor='blue', alpha=0.05)\n\n# Format plot.\ntitle = \"Daily high and low temperatures - 2021\"\ntitle += \"\\nSitka, AK and Death Valley, CA\"\nax.set_title(title, fontsize=24)\nax.set_xlabel('', fontsize=16)\nfig.autofmt_xdate()\nax.set_ylabel(\"Temperature (F)\", fontsize=16)\nax.tick_params(labelsize=16)\nax.set_ylim(10, 140)\n\nplt.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_16/#16-4-automatic-indexes","title":"16-4: Automatic Indexes","text":"<p>In this section, we hardcoded the indexes corresponding to the <code>TMIN</code> and <code>TMAX</code> columns. Use the header row to determine the indexes for these values, so your program can work for Sitka or Death Valley. Use the station name to automatically generate an appropriate title for your graph as well.</p> <p>The <code>index()</code> method returns the index of an item in a list. For example:</p> <pre><code>&gt;&gt;&gt; animals = ['cat', 'dog', 'mouse', 'elephant']\n&gt;&gt;&gt; animals.index('dog')\n1\n</code></pre> <p>This can help us pull the indexes of the headers we want from the header row:</p> automatic_indexes.py<pre><code>from pathlib import Path\nimport csv\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n\n\npath = Path('weather_data/death_valley_2021_simple.csv')\nlines = path.read_text().splitlines()\n\nreader = csv.reader(lines)\nheader_row = next(reader)\n\ndate_index = header_row.index('DATE')\nhigh_index = header_row.index('TMAX')\nlow_index = header_row.index('TMIN')\nname_index = header_row.index('NAME')\n\n# Extract dates, and high and low temperatures.\ndates, highs, lows = [], [], []\nplace_name = \"\"\nfor row in reader:\n    # Grab the station name, if it's not already set.\n    if not place_name:\n        place_name = row[name_index]\n\n    current_date = datetime.strptime(row[date_index], '%Y-%m-%d')\n    try:\n        high = int(row[high_index])\n        low = int(row[low_index])\n    except ValueError:\n        print(f\"Missing data for {current_date}\")\n    else:\n        dates.append(current_date)\n        highs.append(high)\n        lows.append(low)\n\n# Plot the high and low temperatures.\nplt.style.use('seaborn-v0_8')\nfig, ax = plt.subplots()\nax.plot(dates, highs, color='red', alpha=0.5)\nax.plot(dates, lows, color='blue', alpha=0.5)\nax.fill_between(dates, highs, lows, facecolor='blue', alpha=0.1)\n\n# Format plot.\ntitle = f\"Daily High and Low Temperatures, 2021\\n{place_name}\"\nax.set_title(title, fontsize=20)\nfig.autofmt_xdate()\nax.set_ylabel(\"Temperature (F)\", fontsize=16)\nax.tick_params(labelsize=16)\n\nplt.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_16/#16-6-refactoring","title":"16-6: Refactoring","text":"<p>The loop that pulls data from <code>all_eq_dicts</code> uses variables for the magnitude, longitude, latitude, and title of each earthquake before appending these values to their appropriate lists. This approach was chosen for clarity in how to pull data from a GeoJSON file, but it\u2019s not necessary in your code. Instead of using these temporary variables, pull each value from <code>eq_dict</code> and append it to the appropriate list in one line. Doing so should shorten the body of this loop to just four lines.</p> eq_world_map_refactored.py<pre><code>from pathlib import Path\nimport json\n\nimport plotly.express as px\n\n\n# Read data as a string and convert to a Python object.\npath = Path('eq_data/eq_data_30_day_m1.geojson')\ncontents = path.read_text()\nall_eq_data = json.loads(contents)\n\n# Examine all earthquakes in the dataset.\nall_eq_dicts = all_eq_data['features']\n\nmags, lons, lats, eq_titles = [], [], [], []\nfor eq_dict in all_eq_dicts:\n    mags.append(eq_dict['properties']['mag'])\n    lons.append(eq_dict['geometry']['coordinates'][0])\n    lats.append(eq_dict['geometry']['coordinates'][1])\n    eq_titles.append(eq_dict['properties']['title'])\n\ntitle = 'Global Earthquakes'\nfig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title,\n        color=mags,\n        color_continuous_scale='Viridis',\n        labels={'color':'Magnitude'},\n        projection='natural earth',\n        hover_name=eq_titles,\n    )\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_16/#16-6-automated-title","title":"16-6: Automated Title","text":"<p>In this section, we used the generic title Global Earthquakes. Instead, you can use the title for the dataset in the <code>metadata</code> part of the GeoJSON file. Pull this value and assign it to the variable title.</p> eq_world_map_automated_title.py<pre><code>from pathlib import Path\nimport json\n\nimport plotly.express as px\n\n\n# Read data as a string and convert to a Python object.\npath = Path('eq_data/eq_data_30_day_m1.geojson')\ncontents = path.read_text()\nall_eq_data = json.loads(contents)\n\n# Examine all earthquakes in the dataset.\ntitle = all_eq_data['metadata']['title']\nall_eq_dicts = all_eq_data['features']\n\nmags, lons, lats, eq_titles = [], [], [], []\nfor eq_dict in all_eq_dicts:\n    mags.append(eq_dict['properties']['mag'])\n    lons.append(eq_dict['geometry']['coordinates'][0])\n    lats.append(eq_dict['geometry']['coordinates'][1])\n    eq_titles.append(eq_dict['properties']['title'])\n\nfig = px.scatter_geo(lat=lats, lon=lons, size=mags, title=title,\n        color=mags,\n        color_continuous_scale='Viridis',\n        labels={'color':'Magnitude'},\n        projection='natural earth',\n        hover_name=eq_titles,\n    )\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_16/#16-9-world-fires","title":"16-9: World Fires","text":"<p>In the resources for this chapter, you\u2019ll find a file called world_fires_1_day.csv. This file contains information about fires burning in different locations around the globe, including the latitude, longitude, and brightness of each fire. Using the data-processing work from the first part of this chapter and the mapping work from this section, make a map that shows which parts of the world are affected by fires.</p> <p>You can download more recent versions of this data at https://earthdata.nasa.gov/earth-observation-data/near-real-time/firms/active-fire-data. You can find links to the data in CSV format in the SHP, KML, and TXT Files section.</p> <p>Note: Global fire activity can be highly variable, so the size of this dataset can vary widely depending on when you happen to download it. Using all of the data may slow your system down too much. If that happens, make a copy of the original data file but only keep the first 5,000 rows, or however many rows your system can handle in a reasonable amount of processing time.</p> world_fires.py<pre><code>from pathlib import Path\nimport csv\n\nimport plotly.express as px\n\n\npath = Path('eq_data/world_fires_1_day.csv')\nlines = path.read_text().splitlines()\n\nreader = csv.reader(lines)\nheader_row = next(reader)\n\n# Extract lat, lon, brightness\nlats, lons, brights = [], [], []\nfor row in reader:\n    try:\n        lat = float(row[0])\n        lon = float(row[1])\n        bright = float(row[2])\n    except ValueError:\n        # Show raw date information for invalid rows.\n        print(f\"Invalid data for {row[5]}\")\n    else:\n        lats.append(lat)\n        lons.append(lon)\n        brights.append(bright)\n\n# Plot brightnesses on a world map.\ntitle = \"Global wildfire activity\"\nfig = px.scatter_geo(lat=lats, lon=lons, size=brights, title=title,\n        color=brights,\n        color_continuous_scale='Viridis',\n        labels={'color':'Brightness'},\n        projection='natural earth',\n    )\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_17/","title":"Solutions - Chapter 17","text":""},{"location":"solutions/chapter_17/#17-1-other-languages","title":"17-1: Other Languages","text":"<p>Modify the API call in python_repos.py so it generates a chart showing the most popular projects in other languages. Try languages such as JavaScript, Ruby, C, Java, Perl, Haskell, and Go.</p> javascript_repos.py<pre><code>import requests\nimport plotly.express as px\n\n\n# Make an API call and check the response.\nurl = \"https://api.github.com/search/repositories\"\nurl += \"?q=language:javascript+sort:stars+stars:&gt;10000\"\n\nheaders = {\"Accept\": \"application/vnd.github.v3+json\"}\nr = requests.get(url, headers=headers)\nprint(f\"Status code: {r.status_code}\")\n\n# Process overall results.\nresponse_dict = r.json()\nprint(f\"Complete results: {not response_dict['incomplete_results']}\")\n\n# Process repository information.\nrepo_dicts = response_dict['items']\nrepo_links, stars, hover_texts = [], [], []\nfor repo_dict in repo_dicts:\n    # Turn repo names into active links.\n    repo_name = repo_dict['name']\n    repo_url = repo_dict['html_url']\n    repo_link = f\"&lt;a href='{repo_url}'&gt;{repo_name}&lt;/a&gt;\"\n    repo_links.append(repo_link)\n\n    stars.append(repo_dict['stargazers_count'])\n\n    # Build hover texts.\n    owner = repo_dict['owner']['login']\n    description = repo_dict['description']\n    hover_text = f\"{owner}&lt;br /&gt;{description}\"\n    hover_texts.append(hover_text)\n\n# Make visualization.\ntitle = \"Most-Starred JavaScript Projects on GitHub\"\nlabels = {'x': 'Repository', 'y': 'Stars'}\nfig = px.bar(x=repo_links, y=stars, title=title, labels=labels,\n        hover_name=hover_texts)\n\nfig.update_layout(title_font_size=28, xaxis_title_font_size=20,\n        yaxis_title_font_size=20)\n\nfig.update_traces(marker_color='SteelBlue', marker_opacity=0.6)\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_17/#17-2-active-discussions","title":"17-2: Active Discussions","text":"<p>Using the data from hn_submissions.py, make a bar chart showing the most active discussions currently happening on Hacker News. The height of each bar should correspond to the number of comments each submission has. The label for each bar should include the submission\u2019s title and act as a link to the discussion page for that submission. If you get a <code>KeyError</code> when creating a chart, use a try-except block to skip over the promotional posts.</p> hn_discussions_visual.py<pre><code>from operator import itemgetter\n\nimport requests\nimport plotly.express as px\n\n\n# Make an API call and check the response.\nurl = 'https://hacker-news.firebaseio.com/v0/topstories.json'\nr = requests.get(url)\nprint(f\"Status code: {r.status_code}\")\n\n# Process information about each submission.\nsubmission_ids = r.json()\n\nsubmission_dicts = []\nfor submission_id in submission_ids[:20]:\n    # Make a new API call for each submission.\n    url = f\"https://hacker-news.firebaseio.com/v0/item/{submission_id}.json\"\n    r = requests.get(url)\n    print(f\"id: {submission_id}\\tstatus: {r.status_code}\")\n    response_dict = r.json()\n\n    # Build a dictionary for each article.\n    try:\n        submission_dict = {\n            'title': response_dict['title'],\n            'hn_link': f\"https://news.ycombinator.com/item?id={submission_id}\",\n            'comments': response_dict['descendants'],\n        }\n    except KeyError:\n        # This is a special YC post with comments disabled.\n        continue\n    else:\n        submission_dicts.append(submission_dict)\n\nsubmission_dicts = sorted(submission_dicts, key=itemgetter('comments'),\n                            reverse=True)\n\n# Process data for plotting.\narticle_links, comment_counts, hover_texts = [], [], []\nfor submission_dict in submission_dicts:\n    # Shorten long article titles.\n    title = submission_dict['title'][:30]\n    discussion_link = submission_dict['hn_link']\n    article_link = f'&lt;a href=\"{discussion_link}\"\"&gt;{title}&lt;/a&gt;'\n    comment_count = submission_dict['comments']\n\n    article_links.append(article_link)\n    comment_counts.append(comment_count)\n    # Show the full title on hover.\n    hover_texts.append(submission_dict['title'])\n\n# Make visualization.\ntitle = \"Most active discussions on Hacker News\"\nlabels = {'x': 'Article', 'y': 'Comment count'}\nfig = px.bar(x=article_links, y=comment_counts, title=title, labels=labels,\n        hover_name=hover_texts)\n\nfig.update_layout(title_font_size=28, xaxis_title_font_size=20,\n        yaxis_title_font_size=20)\n\nfig.update_traces(marker_color='SteelBlue', marker_opacity=0.6)\n\nfig.show()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"solutions/chapter_17/#17-3-testing-python_repospy","title":"17-3 Testing python_repos.py","text":"<p>In python_repos.py, we printed the value of <code>status_code</code> to make sure the API call was successful. Write a program called test_python_repos.py that uses <code>pytest</code> to assert that the value of <code>status_code</code> is 200. Figure out some other assertions you can make: for example, that the number of items returned is expected and that the total number of repositories is greater than a certain amount.</p> <p>Note: It's much easier to test a program that's broken up into functions or classes. So this solution actually has three parts: a version of python_repos.py that uses functions to do its work, a simpler test file, and a test file that uses fixtures.</p> python_repos_tested.py<pre><code>import requests\n\ndef get_repos_info():\n    \"\"\"Get information about Python repositories on GitHub.\"\"\"\n    # Make an API call and check the response.\n    url = \"https://api.github.com/search/repositories\"\n    url += \"?q=language:python+sort:stars+stars:&gt;10000\"\n\n    headers = {\"Accept\": \"application/vnd.github.v3+json\"}\n    r = requests.get(url, headers=headers)\n\n    print(f\"Status code: {r.status_code}\")\n\n    return r\n\ndef get_response_dict(response):\n    \"\"\"Convert the response object to a dictionary.\"\"\"\n    response_dict = response.json()\n    return response_dict\n\ndef show_repos_info(response_dict):\n    \"\"\"Show information about the returned repositories.\"\"\"\n    print(f\"Total repositories: {response_dict['total_count']}\")\n    print(f\"Complete results: {not response_dict['incomplete_results']}\")\n\ndef get_repo_dicts(response_dict):\n    \"\"\"Return list of dictionaries, one for each repository.\"\"\"\n    repo_dicts = response_dict['items']\n    return repo_dicts\n\ndef show_repo_dicts_info(repo_dicts):\n    \"\"\"Summarize information about repositories.\"\"\"\n    print(f\"Repositories returned: {len(repo_dicts)}\")\n\n    print(\"\\nSelected information about each repository:\")\n    for repo_dict in repo_dicts:\n        print(\"\\nSelected information about first repository:\")\n        print(f\"Name: {repo_dict['name']}\")\n        print(f\"Owner: {repo_dict['owner']['login']}\")\n        print(f\"Stars: {repo_dict['stargazers_count']}\")\n        print(f\"Repository: {repo_dict['html_url']}\")\n        print(f\"Created: {repo_dict['created_at']}\")\n        print(f\"Updated: {repo_dict['updated_at']}\")\n        print(f\"Description: {repo_dict['description']}\")\n\nresponse = get_repos_info()\nresponse_dict = get_response_dict(response)\nshow_repos_info(response_dict)\nrepo_dicts = get_repo_dicts(response_dict)\nshow_repo_dicts_info(repo_dicts)\n</code></pre> <p>Output:</p> <pre><code>Status code: 200\nTotal repositories: 307\nComplete results: True\nRepositories returned: 30\n\nSelected information about each repository:\n\nSelected information about first repository:\nName: public-apis\nOwner: public-apis\nStars: 227342\nRepository: https://github.com/public-apis/public-apis\nCreated: 2016-03-20T23:49:42Z\nUpdated: 2023-02-08T01:53:56Z\nDescription: A collective list of free APIs\n...\n</code></pre> <p>Here's a version of test_python_repos.py that does not use fixtures:</p> test_python_repos.py<pre><code>import pytest\n\nfrom python_repos_tested import get_repos_info, get_response_dict, get_repo_dicts\n\n\ndef test_response_status_code():\n    \"\"\"Test that a response has a successful status code.\"\"\"\n    r = get_repos_info()\n    assert r.status_code == 200\n\ndef test_response_dict():\n    \"\"\"Verify an appropriate number of repositories are represented,\n    and the results are complete.\n    \"\"\"\n    r = get_repos_info()\n    response_dict = get_response_dict(r)\n\n    total_count = response_dict['total_count']\n    complete_results = not response_dict['incomplete_results']\n\n    assert total_count &gt; 240\n    assert complete_results\n\ndef test_repo_dicts():\n    \"\"\"Verify the results in repo_dicts are correct.\"\"\"\n    r = get_repos_info()\n    response_dict = get_response_dict(r)\n    repo_dicts = get_repo_dicts(response_dict)\n\n    assert len(repo_dicts) == 30\n\n    # Check that all repos returned have over 10k stars.\n    for repo_dict in repo_dicts:\n        assert repo_dict['stargazers_count'] &gt; 10_000\n</code></pre> <p>Output:</p> <pre><code>$ pytest test_python_repos.py \n==================== test session starts ====================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /Users/eric/pcc_3e/solution_files/chapter_17\ncollected 3 items                                            \n\ntest_python_repos.py ...                               [100%]\n\n==================== 3 passed in 6.42s ====================\n</code></pre> <p>This is a reasonable first pass at writing these three tests. But you might notice that every test function needs to call <code>get_repos_info()</code>, which means there's one API call for every single test function. That would quickly get out of hand.</p> <p>Here's the same three tests, using a fixture to make sure that <code>get_repos_info()</code> is only called once for the entire test run:</p> test_python_repos_with_fixture.py<pre><code>import pytest\n\nfrom python_repos_tested import get_repos_info, get_response_dict, get_repo_dicts\n\n\n@pytest.fixture\ndef response():\n    \"\"\"Get a response object.\"\"\"\n    r = get_repos_info()\n    return r\n\ndef test_response_status_code(response):\n    \"\"\"Test that a response has a successful status code.\"\"\"\n    assert response.status_code == 200\n\ndef test_response_dict(response):\n    \"\"\"Verify an appropriate number of repositories are represented,\n    and the results are complete.\n    \"\"\"\n    response_dict = get_response_dict(response)\n\n    total_count = response_dict['total_count']\n    complete_results = not response_dict['incomplete_results']\n\n    assert total_count &gt; 240\n    assert complete_results\n\ndef test_repo_dicts(response):\n    \"\"\"Verify the results in repo_dicts are correct.\"\"\"\n    response_dict = get_response_dict(response)\n    repo_dicts = get_repo_dicts(response_dict)\n\n    assert len(repo_dicts) == 30\n\n    # Check that all repos returned have over 10k stars.\n    for repo_dict in repo_dicts:\n        assert repo_dict['stargazers_count'] &gt; 10_000\n</code></pre> <p>Output:</p> <pre><code>$ pytest test_python_repos_with_fixture.py \n==================== test session starts ====================\nplatform darwin -- Python 3.10.0, pytest-7.1.2, pluggy-1.0.0\nrootdir: /Users/eric/pcc_3e/solution_files/chapter_17\ncollected 3 items                                             \n\ntest_python_repos_with_fixture.py ...                  [100%]\n\n==================== 3 passed in 7.46s ====================\n</code></pre> <p>Note: The times reported by pytest are not representative of the entire time it takes to run the test suite. Some of the time that's spent waiting for network calls is not counted by pytest. If you time these two test runs with a stopwatch or another non-pytest timer, you'll find that the file using a fixture runs significantly faster than the file without a fixture. This difference would become even more significant as the number of test functions grows.</p>"},{"location":"solutions/chapter_18/","title":"Solutions - Chapter 18","text":""},{"location":"solutions/chapter_18/#18-1-new-projects","title":"18-1: New Projects","text":"<p>To get a better idea of what Django does, build a couple empty projects and look at what Django creates. Make a new folder with a simple name, like tik_gram or insta_tok (outside of your learning_log directory), navigate to that folder in a terminal, and create a virtual environment. Install Django and run the command <code>django-admin startproject tg_project .</code> (making sure to include the dot at the end of the command).</p> <p>Look at the files and folders this command creates, and compare them to Learning Log. Do this a few times, until you\u2019re familiar with what Django creates when starting a new project. Then delete the project directories if you wish.</p> <p>Note: Early printings of the third edition mention the commmand <code>django-admin.py startproject</code>. That was a holdover from earlier editions; you should use the command <code>django-admin startproject</code> (without the <code>.py</code>), as shown in the main part of the text.</p> <p>You should see output similar to the following:</p> <pre><code>(tg_env)tik_gram$ django-admin startproject tg_project .\n(tg_env)tik_gram$ ls\nmanage.py   tg_project\n(tg_env)tik_gram$ ls tg_project \n__init__.py asgi.py     settings.py urls.py     wsgi.py\n</code></pre>"},{"location":"solutions/chapter_18/#18-2-short-entries","title":"18-2: Short Entries","text":"<p>The <code>__str__()</code> method in the <code>Entry</code> model currently appends an ellipsis to every instance of <code>Entry</code> when Django shows it in the admin site or the shell. Add an <code>if</code> statement to the <code>__str__()</code> method that adds an ellipsis only if the entry is longer than 50 characters. Use the admin site to add an entry that\u2019s fewer than 50 characters in length, and check that it doesn\u2019t have an ellipsis when viewed.</p> models.py<pre><code>from django.db import models\n\nclass Topic(models.Model):\n    ...\n\nclass Entry(models.Model):\n    \"\"\"Something specific learned about a topic.\"\"\"\n    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)\n    text = models.TextField()\n    date_added = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name_plural = 'entries'\n\n    def __str__(self):\n        \"\"\"Return a simple string representing the entry.\"\"\"\n        if len(self.text) &gt; 50:\n            return f\"{self.text[:50]}...\"\n        else:\n            return self.text\n</code></pre>"},{"location":"solutions/chapter_18/#18-4-pizzeria","title":"18-4: Pizzeria","text":"<p>Start a new project called <code>pizzeria_project</code> with an app called <code>pizzas</code>. Define a model <code>Pizza</code> with a field called <code>name</code>, which will hold name values, such as <code>Hawaiian</code> and <code>Meat Lovers</code>. Define a model called <code>Topping</code> with fields called <code>pizza</code> and <code>name</code>. The <code>pizza</code> field should be a foreign key to <code>Pizza</code>, and <code>name</code> should be able to hold values such as <code>pineapple</code>, <code>Canadian bacon</code>, and <code>sausage</code>.</p> <p>Register both models with the admin site, and use the site to enter some pizza names and toppings. Use the shell to explore the data you entered.</p> <p>An entire Django project, even a small one, is too much to list here. You can see the full solution to this project here.</p>"},{"location":"solutions/chapter_18/#18-5-meal-planner","title":"18-5: Meal Planner","text":"<p>Consider an app that helps people plan their meals throughout the week. Make a new folder called meal_planner, and start a new Django project inside this folder. Then make a new app called <code>meal_plans</code>. Make a simple home page for this project.</p> <p>The full solution is here.</p>"},{"location":"solutions/chapter_18/#18-6-pizzeria-home-page","title":"18-6: Pizzeria Home Page","text":"<p>Add a home page to the <code>Pizzeria</code> project you started in Exercise 18-4 (page 388).</p> <p>The full solution is here.</p>"},{"location":"solutions/chapter_18/#18-8-pizzeria-pages","title":"18-8: Pizzeria Pages","text":"<p>Add a page to the <code>Pizzeria</code> project from Exercise 18-6 (page 392) that shows the names of available pizzas. Then link each pizza name to a page displaying the pizza\u2019s toppings. Make sure you use template inheritance to build your pages efficiently.</p> <p>The full solution is here.</p>"},{"location":"solutions/chapter_19/","title":"Solutions - Chapter 19","text":""},{"location":"solutions/chapter_19/#19-1-blog","title":"19-1: Blog","text":"<p>Start a new Django project called <code>Blog</code>. Create an app called <code>blogs</code>, with one model that represents an overall blog, and one model that represents an individual blog post. Give each model an appropriate set of fields. Create a superuser for the project, and use the admin site to make a blog and a couple of short posts. Make a home page that shows all posts in an appropriate order.</p> <p>Create pages for making a blog, for making new posts, and for editing existing posts. Use your pages to make sure they work.</p> <p>The full solution is here.</p>"},{"location":"solutions/chapter_19/#19-2-blog-accounts","title":"19-2: Blog Accounts","text":"<p>Add a user authentication and registration system to the <code>Blog</code> project you started in Exercise 19-1 (page 415). Make sure logged-in users see their username somewhere on the screen and unregistered users see a link to the registration page.</p> <p>The full solution is here.</p>"},{"location":"solutions/chapter_19/#19-3-refactoring","title":"19-3: Refactoring","text":"<p>There are two places in views.py where we make sure the user associated with a topic matches the currently logged-in user. Put the code for this check in a function called <code>check_topic_owner()</code>, and call this function where appropriate.</p> <p>These are the three parts of views.py that are affected by this refactoring work. You can also see the full project for this solution here.</p> views.py<pre><code>...\n@login_required\ndef topic(request, topic_id):\n    \"\"\"Show a single topic and all its entries.\"\"\"\n    topic = Topic.objects.get(id=topic_id)\n    check_topic_owner(topic, request.user)\n    ...\n\n...\n@login_required\ndef edit_entry(request, entry_id):\n    \"\"\"Edit an existing entry.\"\"\"\n    entry = Entry.objects.get(id=entry_id)\n    topic = entry.topic\n    check_topic_owner(topic, request.user)\n    ...\n\ndef check_topic_owner(topic, user):\n    \"\"\"Make sure the currently logged-in user owns the topic that's \n    being requested.\n\n    Raise Http404 error if the user does not own the topic.\n    \"\"\"\n    if topic.owner != user:\n        raise Http404\n</code></pre>"},{"location":"solutions/chapter_19/#19-4-protecting-new_entry","title":"19-4: Protecting <code>new_entry</code>","text":"<p>Currently, a user can add a new entry to another user\u2019s learning log by entering a URL with the ID of a topic belonging to another user. Prevent this attack by checking that the current user owns the entry\u2019s topic before saving the new entry.</p> <p>Note: This solution builds on the refactoring done in 19-3. You can see the full project for this solution here.</p> views.py<pre><code>...\n@login_required    \ndef new_entry(request, topic_id):\n    \"\"\"Add a new entry for a particular topic.\"\"\"\n    topic = Topic.objects.get(id=topic_id)\n    check_topic_owner(topic, request.user)\n    ...\n\n...\ndef check_topic_owner(topic, user):\n    \"\"\"Make sure the currently logged-in user owns the topic that's \n    being requested.\n\n    Raise Http404 error if the user does not own the topic.\n    \"\"\"\n    if topic.owner != user:\n        raise Http404\n</code></pre>"},{"location":"solutions/chapter_19/#19-5-protected-blog","title":"19-5: Protected Blog","text":"<p>In your Blog project, make sure each blog post is connected to a particular user. Make sure all posts are publicly accessible but only registered users can add posts and edit existing posts. In the view that allows users to edit their posts, make sure the user is editing their own post before processing the form.</p> <p>You can see the full project for this solution here.</p>"},{"location":"solutions/chapter_2/","title":"Solutions - Chapter 2","text":""},{"location":"solutions/chapter_2/#2-1-simple-message","title":"2-1: Simple Message","text":"<p>Assign a message to a variable, and then print that message.</p> simple_message.py<pre><code>msg = \"I love learning to use Python.\"\nprint(msg)\n</code></pre> Output:<pre><code>I love learning to use Python.\n</code></pre>"},{"location":"solutions/chapter_2/#2-2-simple-messages","title":"2-2: Simple Messages","text":"<p>Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message.</p> simple_messages.py<pre><code>msg = \"I love learning to use Python.\"\nprint(msg)\n\nmsg = \"It's really satisfying!\"\nprint(msg)\n</code></pre> Output:<pre><code>I love learning to use Python.\nIt's really satisfying!\n</code></pre>"},{"location":"solutions/chapter_2/#2-3-personal-message","title":"2-3: Personal Message","text":"<p>Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p> personal_message.py<pre><code>name = \"eric\"\nmsg = f\"Hello {name.title()}, would you like to learn some Python today?\"\n\nprint(msg)\n</code></pre> Output:<pre><code>Hello Eric, would you like to learn some Python today?\n</code></pre>"},{"location":"solutions/chapter_2/#2-4-name-cases","title":"2-4: Name Cases","text":"<p>Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p> name_cases.py<pre><code>name = \"eric\"\n\nprint(name.lower())\nprint(name.upper())\nprint(name.title())\n</code></pre> Output:<pre><code>eric\nERIC\nEric\n</code></pre>"},{"location":"solutions/chapter_2/#2-5-famous-quote","title":"2-5: Famous Quote","text":"<p>Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <p>Albert Einstein once said, \"A person who never made a mistake never tried anything new.\"</p> famous_quote.py<pre><code>print('Albert Einstein once said, \"A person who never made a mistake')\nprint('never tried anything new.\"')\n</code></pre> Output:<pre><code>Albert Einstein once said, \"A person who never made a mistake\nnever tried anything new.\"\n</code></pre>"},{"location":"solutions/chapter_2/#2-6-famous-quote-2","title":"2-6: Famous Quote 2","text":"<p>Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called <code>famous_person</code>. Then compose your message and represent it with a new variable called <code>message</code>. Print your message.</p> famous_quote_2.py<pre><code>famous_person = \"Albert Einstein\"\n\nmessage = f'{famous_person} once said, \"A person who never made a mistake never tried anything new.\"'\n\nprint(message)\n</code></pre> Output:<pre><code>Albert Einstein once said, \"A person who never made a mistake never tried anything new.\"\n</code></pre> Note <p>The line that defines <code>message</code> in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the <code>+=</code> operator. So this program could also be written like this, with exactly the same output:</p> famous_quote_3.py<pre><code>famous_person = \"Albert Einstein\"\n\nmessage = f'{famous_person} once said, \"A person who never made a mistake'\nmessage += ' never tried anything new.\"'\n\nprint(message)\n</code></pre>"},{"location":"solutions/chapter_2/#2-7-stripping-names","title":"2-7: Stripping Names","text":"<p>Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, <code>\"\\t\"</code> and <code>\"\\n\"</code>, at least once.</p> <p>Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, <code>lstrip()</code>, <code>rstrip()</code>, and <code>strip()</code>.</p> stripping_names.py<pre><code>name = \"\\tEric Matthes\\n\"\n\nprint(\"Unmodified:\")\nprint(name)\n\nprint(\"\\nUsing lstrip():\")\nprint(name.lstrip())\n\nprint(\"\\nUsing rstrip():\")\nprint(name.rstrip())\n\nprint(\"\\nUsing strip():\")\nprint(name.strip())\n</code></pre> Output:<pre><code>Unmodified:\n    Eric Matthes\n\n\nUsing lstrip():\nEric Matthes\n\n\nUsing rstrip():\n    Eric Matthes\n\nUsing strip():\nEric Matthes\n</code></pre>"},{"location":"solutions/chapter_2/#2-8-file-extensions","title":"2-8: File Extensions","text":"<p>Python has a <code>removesuffix()</code> method that works exactly like <code>removeprefix()</code>. Assign the value 'python_notes.txt' to a variable called <code>filename</code>. Then use the <code>removesuffix()</code> method to display the filename without the file extension, like some file browsers do.</p> file_extensions.py<pre><code>filename = 'python_notes.txt'\nsimple_filename = filename.removesuffix('.txt')\n\nprint(simple_filename)\n</code></pre> Output:<pre><code>python_notes\n</code></pre>"},{"location":"solutions/chapter_2/#2-10-favorite-number","title":"2-10: Favorite Number","text":"<p>Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message.</p> favorite_number.py<pre><code>fav_num = 42\nmsg = f\"My favorite number is {fav_num}.\"\n\nprint(msg)\n</code></pre> Output:<pre><code>My favorite number is 42.\n</code></pre>"},{"location":"solutions/chapter_20/","title":"Solutions - Chapter 20","text":""},{"location":"solutions/chapter_20/#20-1-other-forms","title":"20-1: Other Forms","text":"<p>We applied Bootstrap\u2019s styles to the login page. Make similar changes to the rest of the form-based pages, including <code>new_topic</code>, <code>new_entry</code>, <code>edit_entry</code>, and <code>register</code>.</p> <p>The full solution is here. Here's the register page before styling, and after styling:</p> <p></p> <p></p>"},{"location":"solutions/chapter_20/#20-2-stylish-blog","title":"20-2: Stylish Blog","text":"<p>Use Bootstrap to style the Blog project you created in Chapter 19.</p> <p>The full solution is here. It may help to look at the Bootstrap documentation for styling cards and text. Here's the home page, after applying styles similar to what Learning Log uses:</p> <p></p>"},{"location":"solutions/chapter_20/#20-3-live-blog","title":"20-3: Live Blog","text":"<p>Deploy the Blog project you\u2019ve been working on to Platform.sh. Make sure you set <code>DEBUG</code> to <code>False</code>, so users don\u2019t see the full Django error pages when something goes wrong.</p> <p>Note: When you run <code>platform create</code>, make sure you use the name <code>blog_project</code> when you create the project, and in your settings files:</p> <pre><code>(b_env)$ platform create\n* Project title (--title)\nDefault: Untitled Project\n&gt; blog_project\n\n* Region (--region)\nThe region where the project will be hosted\n  [au.platform.sh  ] Sydney, Australia (AWS) [867 gC02eq/kWh]\n  [au-2.platform.sh] Sydney, Australia (AZURE) [867 gC02eq/kWh]\n  ...\n&gt; us-3.platform.sh\n\n* Plan (--plan)\nThe subscription plan\nDefault: development\nEnter a number to choose: \n  [0 ] development\n  [1 ] standard\n  ...\n&gt; 0\n\n* Environments (--environments)\nThe number of environments\nDefault: 3\n&gt; 3\n\n* Storage (--storage)\nThe amount of storage per environment, in GiB\nDefault: 5\n&gt; 5\n</code></pre> <p>The full solution is here.</p>"},{"location":"solutions/chapter_20/#20-4-extended-learning-log","title":"20-4: Extended Learning Log","text":"<p>Add one feature to Learning Log, and push the change to your live deployment. Try a simple change, such as writing more about the project on the home page. Then try adding a more advanced feature, such as giving users the option of making a topic public. This would require an attribute called <code>public</code> as part of the <code>Topic</code> model (this should be set to <code>False</code> by default) and a form element on the new_topic page that allows the user to change a topic from private to public. You\u2019d then need to migrate the project and revise views.py so any topic that\u2019s public is visible to unauthenticated users as well.</p> <p>Giving users the option to make some of their topics public is a fairly involved task, if Learning Log is your first experience with Django. It may be helpful to look at some specific parts of the documentation, if you're trying to implement this feature:</p> <ul> <li>The Model Field Reference tells you all about the different kinds of fields you can use in a models.py file, and the settings you can use for those fields.<ul> <li>Using default values for a field</li> <li>BooleanField</li> </ul> </li> <li>Making queries shows you how to write more complex queries, such as filtering for public topics that are not associated with the current user.<ul> <li>Filters</li> <li>Chaining filters</li> </ul> </li> <li>When you want to present different information for anonymous and authenticated users, it's helpful to look at the django.contrib.auth documentation.<ul> <li>The is_authenticated attribute, which can be used to find out if a user has authenticated (logged in) or not.</li> <li>See also Limiting access to logged-in users</li> </ul> </li> </ul> <p>Here are a few parts of some specific files to note. First, add a new <code>public</code> attribute to the <code>Topic</code> model:</p> models.py<pre><code>class Topic(models.Model):\n    \"\"\"A topic the user is learning about.\"\"\"\n    text = models.CharField(max_length=200)\n    date_added = models.DateTimeField(auto_now_add=True)\n    public = models.BooleanField(default=False)\n    ...\n</code></pre> <p>The <code>public</code> field needs to be included in <code>TopicForm</code>:</p> forms.py<pre><code>class TopicForm(forms.ModelForm):\n    class Meta:\n        model = Topic\n        fields = ['text', 'public']\n        ...\n</code></pre> <p>The <code>topics</code> and <code>topic</code> views should no longer be protected by <code>@login_required</code>. Also, we make two separate queries, depending on whether the user is authenticated or not. For an authenticated user we get their topics, and a separate list of public topics from other users. For unauthenticated users, we just get all public topics. In the topic view, we set <code>is_owner</code>, so we know whether to show the links to add new entries, or edit existing entries. We also update the conditions for returning a 404 page:</p> views.py<pre><code>def topics(request):\n    \"\"\"Show all of the current user's topics, and public topics that belong\n    to other users.\n    \"\"\"\n    # Get all appropriate topics.\n    # If a user is logged in, we get all of their topics, and all public topics\n    #   from other users.\n    # If a user is not logged in, we get all public topics.\n    if request.user.is_authenticated:\n        topics = Topic.objects.filter(owner=request.user).order_by('date_added')\n        # Get all public topics not owned by the current user.\n        # Note: Wrapping the query in parentheses lets you break the long query\n        #   up across multiple lines.\n        public_topics = (Topic.objects\n            .filter(public=True)\n            .exclude(owner=request.user)\n            .order_by('date_added'))\n    else:\n        # User is not authenticated; return all public topics.\n        topics = None\n        public_topics = Topic.objects.filter(public=True).order_by('date_added')\n\n    context = {'topics': topics, 'public_topics': public_topics}\n    return render(request, 'learning_logs/topics.html', context)\n\ndef topic(request, topic_id):\n    \"\"\"Show a single topic and all its entries.\"\"\"\n    topic = Topic.objects.get(id=topic_id)\n\n    # We only want to show new_entry and edit_entry links if the current\n    #   user owns this topic.\n    is_owner = False\n    if request.user == topic.owner:\n        is_owner = True\n\n    # If the topic belongs to someone else, and it is not public,\n    #   show an error page.\n    if (topic.owner != request.user) and (not topic.public):\n        raise Http404\n\n    entries = topic.entry_set.order_by('-date_added')\n    context = {'topic': topic, 'entries': entries, 'is_owner': is_owner}\n    return render(request, 'learning_logs/topic.html', context)\n</code></pre> <p>On the topics page, we show two unordered lists. The first is only shown to authenticated users. The second is shown to all users:</p> topics.html<pre><code>{% extends 'learning_logs/base.html' %}\n\n{% block page_header %}\n  &lt;h1&gt;Topics&lt;/h1&gt;\n{% endblock page_header %}\n\n{% block content %}\n\n  &lt;!-- Only show \"My topics\" if the user is logged in. --&gt;\n  {% if user.is_authenticated %}\n    &lt;ul class=\"list-group border-bottom pb-2 mb-4\"&gt;\n      &lt;h5&gt;My topics:&lt;/h5&gt;\n      {% for topic in topics %}\n        &lt;li class=\"list-group-item border-0\"&gt;\n          &lt;a href=\"{% url 'learning_logs:topic' topic.id %}\"&gt;\n            {{ topic.text }}&lt;/a&gt;\n        &lt;/li&gt;\n      {% empty %}\n        &lt;li class=\"list-group-item border-0\"&gt;No topics have been added yet.&lt;/li&gt;\n      {% endfor %}\n    &lt;/ul&gt;\n  {% endif %}\n\n  &lt;ul class=\"list-group border-bottom pb-2 mb-4\"&gt;\n    &lt;h5&gt;Public topics:&lt;/h5&gt;\n    {% for topic in public_topics %}\n      &lt;li class=\"list-group-item border-0\"&gt;\n        &lt;a href=\"{% url 'learning_logs:topic' topic.id %}\"&gt;\n          {{ topic.text }}&lt;/a&gt;\n      &lt;/li&gt;\n    {% empty %}\n      &lt;li class=\"list-group-item border-0\"&gt;No users have posted any public topics yet.&lt;/li&gt;\n    {% endfor %}\n  &lt;/ul&gt;\n\n  &lt;a href=\"{% url 'learning_logs:new_topic' %}\"&gt;Add a new topic&lt;/a&gt;\n\n{% endblock content %}\n</code></pre> <p>On the topic page, we wrap the \"Add new entry\" and \"edit entry\" links in if blocks, depending on whether <code>is_owner</code> was set to <code>True</code> or not:</p> topic.html<pre><code>{% extends 'learning_logs/base.html' %}\n\n{% block page_header %}\n  &lt;h1&gt;{{ topic.text }}&lt;/h1&gt;\n{% endblock page_header %}\n\n{% block content %}\n\n  {% if is_owner %}\n    &lt;p&gt;\n      &lt;a href=\"{% url 'learning_logs:new_entry' topic.id %}\"&gt;Add new entry&lt;/a&gt;\n    &lt;/p&gt;\n  {% endif %}\n\n  {% for entry in entries %}\n    &lt;div class=\"card mb-3\"&gt;\n      &lt;!-- Card header with timestamp and edit link --&gt;\n      &lt;h4 class=\"card-header\"&gt;\n        {{ entry.date_added|date:'M d, Y H:i' }}\n        {% if is_owner %}\n          &lt;small&gt;&lt;a href=\"{% url 'learning_logs:edit_entry' entry.id %}\"&gt;\n            edit entry&lt;/a&gt;&lt;/small&gt;\n        {% endif %}\n      &lt;/h4&gt;\n      &lt;!-- Card body with entry text --&gt;\n      &lt;div class=\"card-body\"&gt;{{ entry.text|linebreaks }}&lt;/div&gt;\n    &lt;/div&gt;\n  {% empty %}\n    &lt;p&gt;There are no entries for this topic yet.&lt;/p&gt;\n  {% endfor %}\n\n{% endblock content %}\n</code></pre> <p>The full solution for allowing users to make topics public is here.</p>"},{"location":"solutions/chapter_3/","title":"Solutions - Chapter 3","text":""},{"location":"solutions/chapter_3/#3-1-names","title":"3-1: Names","text":"<p>Store the names of a few of your friends in a list called <code>names</code>. Print each person's name by accessing each element in the list, one at a time.</p> names.py<pre><code>names = ['ron', 'tyler', 'dani']\n\nprint(names[0])\nprint(names[1])\nprint(names[2])\n</code></pre> Output:<pre><code>ron\ntyler\ndani\n</code></pre>"},{"location":"solutions/chapter_3/#3-2-greetings","title":"3-2: Greetings","text":"<p>Start with the list you used in Exercise 3-1, but instead of just printing each person's name, print a message to them. The text of each message should be the same, but each message should be personalized with the person's name.</p> greetings.py<pre><code>names = ['ron', 'tyler', 'dani']\n\nmsg = f\"Hello, {names[0].title()}!\"\nprint(msg)\n\nmsg = f\"Hello, {names[1].title()}!\"\nprint(msg)\n\nmsg = f\"Hello, {names[2].title()}!\"\nprint(msg)\n</code></pre> Output:<pre><code>Hello, Ron!\nHello, Tyler!\nHello, Dani!\n</code></pre>"},{"location":"solutions/chapter_3/#3-4-guest-list","title":"3-4: Guest List","text":"<p>If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you'd like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.</p> guest_list.py<pre><code>guests = ['guido van rossum', 'jack turner', 'lynn hill']\n\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n</code></pre> Output:<pre><code>Guido Van Rossum, please come to dinner.\nJack Turner, please come to dinner.\nLynn Hill, please come to dinner.\n</code></pre>"},{"location":"solutions/chapter_3/#3-5-changing-guest-list","title":"3-5: Changing Guest List","text":"<p>You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite.</p> <ul> <li>Start with your program from Exercise 3-4. Add a <code>print()</code> call at the end of your program, stating the name of the guest who can't make it.</li> <li>Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting.</li> <li>Print a second set of invitation messages, one for each person who is still in your list.</li> </ul> changing_guest_list.py<pre><code># Invite some people to dinner.\nguests = ['guido van rossum', 'jack turner', 'lynn hill']\n\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"\\nSorry, {name} can't make it to dinner.\")\n\n# Jack can't make it! Let's invite Gary instead.\ndel(guests[1])\nguests.insert(1, 'gary snyder')\n\n# Print the invitations again.\nname = guests[0].title()\nprint(f\"\\n{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n</code></pre> Output:<pre><code>Guido Van Rossum, please come to dinner.\nJack Turner, please come to dinner.\nLynn Hill, please come to dinner.\n\nSorry, Jack Turner can't make it to dinner.\n\nGuido Van Rossum, please come to dinner.\nGary Snyder, please come to dinner.\nLynn Hill, please come to dinner.\n</code></pre>"},{"location":"solutions/chapter_3/#3-6-more-guests","title":"3-6: More Guests","text":"<p>You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner.</p> <ul> <li>Start with your program from Exercise 3-4 or Exercise 3-5. Add a <code>print()</code> call to the end of your program, informing people that you found a bigger dinner table.</li> <li>Use <code>insert()</code> to add one new guest to the beginning of your list.</li> <li>Use <code>insert()</code> to add one new guest to the middle of your list.</li> <li>Use <code>append()</code> to add one new guest to the end of your list. Print a new set of invitation messages, one for each person in your list.</li> </ul> more_guests.py<pre><code># Invite some people to dinner.\nguests = ['guido van rossum', 'jack turner', 'lynn hill']\n\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"\\nSorry, {name} can't make it to dinner.\")\n\n# Jack can't make it! Let's invite Gary instead.\ndel(guests[1])\nguests.insert(1, 'gary snyder')\n\n# Print the invitations again.\nname = guests[0].title()\nprint(f\"\\n{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\n# We got a bigger table, so let's add some more people to the list.\nprint(\"\\nWe got a bigger table!\")\nguests.insert(0, 'frida kahlo')\nguests.insert(2, 'reinhold messner')\nguests.append('elizabeth peratrovich')\n\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[3].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[4].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[5].title()\nprint(f\"{name}, please come to dinner.\")\n</code></pre> Output:<pre><code>Guido Van Rossum, please come to dinner.\nJack Turner, please come to dinner.\nLynn Hill, please come to dinner.\n\nSorry, Jack Turner can't make it to dinner.\n\nGuido Van Rossum, please come to dinner.\nGary Snyder, please come to dinner.\nLynn Hill, please come to dinner.\n\nWe got a bigger table!\nFrida Kahlo, please come to dinner.\nGuido Van Rossum, please come to dinner.\nReinhold Messner, please come to dinner.\nGary Snyder, please come to dinner.\nLynn Hill, please come to dinner.\nElizabeth Peratrovich, please come to dinner.\n</code></pre>"},{"location":"solutions/chapter_3/#3-7-shrinking-guest-list","title":"3-7: Shrinking Guest List","text":"<p>You just found out that your new dinner table won't arrive in time for the dinner, and you have space for only two guests.</p> <ul> <li>Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner.</li> <li>Use <code>pop()</code> to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you're sorry you can't invite them to dinner.</li> <li>Print a message to each of the two people still on your list, letting them know they're still invited.</li> <li>Use <code>del</code> to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program.</li> </ul> shrinking_guest_list.py<pre><code># Invite some people to dinner.\nguests = ['guido van rossum', 'jack turner', 'lynn hill']\n\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"\\nSorry, {name} can't make it to dinner.\")\n\n# Jack can't make it! Let's invite Gary instead.\ndel(guests[1])\nguests.insert(1, 'gary snyder')\n\n# Print the invitations again.\nname = guests[0].title()\nprint(f\"\\n{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\n# We got a bigger table, so let's add some more people to the list.\nprint(\"\\nWe got a bigger table!\")\nguests.insert(0, 'frida kahlo')\nguests.insert(2, 'reinhold messner')\nguests.append('elizabeth peratrovich')\n\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[2].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[3].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[4].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[5].title()\nprint(f\"{name}, please come to dinner.\")\n\n# Oh no, the table won't arrive on time!\nprint(\"\\nSorry, we can only invite two people to dinner.\")\n\nname = guests.pop()\nprint(f\"Sorry, {name.title()} there's no room at the table.\")\n\nname = guests.pop()\nprint(f\"Sorry, {name.title()} there's no room at the table.\")\n\nname = guests.pop()\nprint(f\"Sorry, {name.title()} there's no room at the table.\")\n\nname = guests.pop()\nprint(f\"Sorry, {name.title()} there's no room at the table.\")\n\n# There should be two people left. Let's invite them.\nname = guests[0].title()\nprint(f\"{name}, please come to dinner.\")\n\nname = guests[1].title()\nprint(f\"{name}, please come to dinner.\")\n\n# Empty out the list.\ndel(guests[0])\ndel(guests[0])\n\n# Prove the list is empty.\nprint(guests)\n</code></pre> Output:<pre><code>Guido Van Rossum, please come to dinner.\nJack Turner, please come to dinner.\nLynn Hill, please come to dinner.\n\nSorry, Jack Turner can't make it to dinner.\n\nGuido Van Rossum, please come to dinner.\nGary Snyder, please come to dinner.\nLynn Hill, please come to dinner.\n\nWe got a bigger table!\nFrida Kahlo, please come to dinner.\nGuido Van Rossum, please come to dinner.\nReinhold Messner, please come to dinner.\nGary Snyder, please come to dinner.\nLynn Hill, please come to dinner.\nElizabeth Peratrovich, please come to dinner.\n\nSorry, we can only invite two people to dinner.\nSorry, Elizabeth Peratrovich there's no room at the table.\nSorry, Lynn Hill there's no room at the table.\nSorry, Gary Snyder there's no room at the table.\nSorry, Reinhold Messner there's no room at the table.\nFrida Kahlo, please come to dinner.\nGuido Van Rossum, please come to dinner.\n[]\n</code></pre>"},{"location":"solutions/chapter_3/#3-8-seeing-the-world","title":"3-8: Seeing the World","text":"<p>Think of at least five places in the world you'd like to visit.</p> <ul> <li>Store the locations in a list. Make sure the list is not in alphabetical order.</li> <li>Print your list in its original order. Don't worry about printing the list neatly, just print it as a raw Python list.</li> <li>Use <code>sorted()</code> to print your list in alphabetical order without modifying the actual list.</li> <li>Show that your list is still in its original order by printing it.</li> <li>Use <code>sorted()</code> to print your list in reverse alphabetical order without changing the order of the original list.</li> <li>Show that your list is still in its original order by printing it again.</li> <li>Use <code>reverse()</code> to change the order of your list. Print the list to show that its order has changed.</li> <li>Use <code>reverse()</code> to change the order of your list again. Print the list to show it's back to its original order.</li> <li>Use <code>sort()</code> to change your list so it's stored in alphabetical order. Print the list to show that its order has been changed.</li> <li>Use <code>sort()</code> to change your list so it's stored in reverse alphabetical order. Print the list to show that its order has changed.</li> </ul> seeing_the_world.py<pre><code>locations = ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam']\n\nprint(\"Original order:\")\nprint(locations)\n\nprint(\"\\nAlphabetical:\")\nprint(sorted(locations))\n\nprint(\"\\nOriginal order:\")\nprint(locations)\n\nprint(\"\\nReverse alphabetical:\")\nprint(sorted(locations, reverse=True))\n\nprint(\"\\nOriginal order:\")\nprint(locations)\n\nprint(\"\\nReversed:\")\nlocations.reverse()\nprint(locations)\n\nprint(\"\\nOriginal order:\")\nlocations.reverse()\nprint(locations)\n\nprint(\"\\nAlphabetical\")\nlocations.sort()\nprint(locations)\n\nprint(\"\\nReverse alphabetical\")\nlocations.sort(reverse=True)\nprint(locations)\n</code></pre> Output:<pre><code>Original order:\n['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam']\n\nAlphabetical:\n['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego']\n\nOriginal order:\n['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam']\n\nReverse alphabetical:\n['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes']\n\nOriginal order:\n['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam']\n\nReversed:\n['guam', 'labrador', 'tierra del fuego', 'andes', 'himalaya']\n\nOriginal order:\n['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam']\n\nAlphabetical\n['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego']\n\nReverse alphabetical\n['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes']\n</code></pre>"},{"location":"solutions/chapter_4/","title":"Solutions - Chapter 4","text":""},{"location":"solutions/chapter_4/#4-1-pizzas","title":"4-1: Pizzas","text":"<p>Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a <code>for</code> loop to print the name of each pizza.</p> <ul> <li>Modify your <code>for</code> loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza.</li> <li>Add a line at the end of your program, outside the <code>for</code> loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</li> </ul> pizzas.py<pre><code>favorite_pizzas = ['pepperoni', 'hawaiian', 'veggie']\n\n# Print the names of all the pizzas.\nfor pizza in favorite_pizzas:\n    print(pizza)\n\nprint(\"\\n\")\n\n# Print a sentence about each pizza.\nfor pizza in favorite_pizzas:\n    print(f\"I really love {pizza} pizza!\")\n\nprint(\"\\nI really love pizza!\")\n</code></pre> Output:<pre><code>pepperoni\nhawaiian\nveggie\n\nI really love pepperoni pizza!\nI really love hawaiian pizza!\nI really love veggie pizza!\n\nI really love pizza!\n</code></pre>"},{"location":"solutions/chapter_4/#4-2-animals","title":"4-2: Animals","text":"<p>Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a <code>for</code> loop to print out the name of each animal. - Modify your program to print a statement about each animal, such as A dog would make a great pet. - Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet!</p> animals.py<pre><code>animals = [\"spider monkey\", \"lemur\", \"giraffe\"]\n\n# Print each animal.\nfor animal in animals:\n    print(animal)\n\nprint(\"\\n\")\n\n# Print a statement about each animal.\nfor animal in animals:\n    print(f\"A {animal} has a long tail.\")\n\nprint(\"\\nAll of these animals have long tails.\")\n</code></pre> Output:<pre><code>spider monkey\nlemur\ngiraffe\n\nA spider monkey has a long tail.\nA lemur has a long tail.\nA giraffe has a long tail.\n\nAll of these animals have long tails.\n</code></pre>"},{"location":"solutions/chapter_4/#4-3-counting-to-twenty","title":"4-3: Counting to Twenty","text":"<p>Use a <code>for</code> loop to print the numbers from 1 to 20, inclusive.</p> counting_to_twenty.py<pre><code>numbers = list(range(1, 21))\n\nfor number in numbers:\n    print(number)\n</code></pre> Output:<pre><code>1\n2\n3\n...\n18\n19\n20\n</code></pre>"},{"location":"solutions/chapter_4/#4-5-summing-a-million","title":"4-5: Summing a Million","text":"<p>Make a list of the numbers from one to one million, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one million. Also, use the <code>sum()</code> function to see how quickly Python can add a million numbers.</p> summing_a_million.py<pre><code>numbers = list(range(1, 1_000_001))\n\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</code></pre> Output:<pre><code>1\n1000000\n500000500000\n</code></pre>"},{"location":"solutions/chapter_4/#4-6-odd-numbers","title":"4-6: Odd Numbers","text":"<p>Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p> odd_numbers.py<pre><code>odd_numbers = list(range(1, 20, 2))\n\nfor number in odd_numbers:\n    print(number)\n</code></pre> Output:<pre><code>1\n3\n5\n...\n15\n17\n19\n</code></pre>"},{"location":"solutions/chapter_4/#4-7-threes","title":"4-7: Threes","text":"<p>Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p> threes.py<pre><code>threes = list(range(3, 31, 3))\n\nfor number in threes:\n    print(number)\n</code></pre> Output:<pre><code>3\n6\n9\n...\n24\n27\n30\n</code></pre>"},{"location":"solutions/chapter_4/#4-8-cubes","title":"4-8: Cubes","text":"<p>A number raised to the third power is called a cube. For example, the cube of 2 is written as <code>2**3</code> in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a <code>for</code> loop to print out the value of each cube.</p> cubes.py<pre><code>cubes = []\nfor number in range(1, 11):\n    cube = number**3\n    cubes.append(cube)\n\nfor cube in cubes:\n    print(cube)\n</code></pre> Output:<pre><code>1\n8\n27\n...\n512\n729\n1000\n</code></pre>"},{"location":"solutions/chapter_4/#4-9-cube-comprehension","title":"4-9: Cube Comprehension","text":"<p>Use a list comprehension to generate a list of the first 10 cubes.</p> cube_comprehension.py<pre><code>cubes = [number**3 for number in range(1,11)]\n\nfor cube in cubes:\n    print(cube)\n</code></pre> Output:<pre><code>1\n8\n27\n...\n512\n729\n1000\n</code></pre>"},{"location":"solutions/chapter_4/#4-11-my-pizzas-your-pizzas","title":"4-11: My Pizzas, Your Pizzas","text":"<p>Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it <code>friend_pizzas</code>. Then, do the following:</p> <ul> <li>Add a new pizza to the original list.</li> <li>Add a different pizza to the list <code>friend_pizzas</code>.</li> <li>Prove that you have two separate lists. Print the message, My favorite pizzas are:, and then use a <code>for</code> loop to print the first list. Print the message, My friend's favorite pizzas are:, and then use a <code>for</code> loop to print the second list. Make sure each new pizza is stored in the appropriate list.</li> </ul> my_pizzas_your_pizzas.py<pre><code>favorite_pizzas = ['pepperoni', 'hawaiian', 'veggie']\nfriend_pizzas = favorite_pizzas[:]\n\nfavorite_pizzas.append(\"meat lover's\")\nfriend_pizzas.append('pesto')\n\nprint(\"My favorite pizzas are:\")\nfor pizza in favorite_pizzas:\n    print(f\"- {pizza}\")\n\nprint(\"\\nMy friend's favorite pizzas are:\")\nfor pizza in friend_pizzas:\n    print(f\"- {pizza}\")\n</code></pre> Output:<pre><code>My favorite pizzas are:\n- pepperoni\n- hawaiian\n- veggie\n- meat lover's\n\nMy friend's favorite pizzas are:\n- pepperoni\n- hawaiian\n- veggie\n- pesto\n</code></pre>"},{"location":"solutions/chapter_4/#4-12-more-loops","title":"4-12: More Loops","text":"<p>All versions of foods.py in this section have avoided using <code>for</code> loops when printing, to save space. Choose a version of foods.py, and write two <code>for</code> loops to print each list of foods.</p> more_loops.py<pre><code>my_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_foods = my_foods[:]\n\nmy_foods.append('cannoli')\nfriend_foods.append('ice cream')\n\nprint(\"My favorite foods are:\")\nfor food in my_foods:\n    print(f\"- {food}\")\n\nprint(\"\\nMy friend's favorite foods are:\")\nfor food in friend_foods:\n    print(f\"- {food}\")\n</code></pre> Output:<pre><code>My favorite foods are:\n- pizza\n- falafel\n- carrot cake\n- cannoli\n\nMy friend's favorite foods are:\n- pizza\n- falafel\n- carrot cake\n- ice cream\n</code></pre>"},{"location":"solutions/chapter_4/#4-13-buffet","title":"4-13: Buffet","text":"<p>A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <ul> <li>Use a <code>for</code> loop to print each food the restaurant offers.</li> <li>Try to modify one of the items, and make sure that Python rejects the change.</li> <li>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a <code>for</code> loop to print each of the items on the revised menu.</li> </ul> buffet.py<pre><code>menu_items = (\n    'rockfish sandwich', 'halibut nuggets', 'smoked salmon chowder',\n    'salmon burger', 'crab cakes',\n    )\n\nprint(\"You can choose from the following menu items:\")\nfor item in menu_items:\n    print(f\"- {item}\")\n\nmenu_items = (\n    'rockfish sandwich', 'halibut nuggets', 'smoked salmon chowder',\n    'black cod tips', 'king crab legs',\n    )\n\nprint(\"\\nOur menu has been updated.\")\nprint(\"You can now choose from the following items:\")\nfor item in menu_items:\n    print(f\"- {item}\")\n</code></pre> Output:<pre><code>You can choose from the following menu items:\n- rockfish sandwich\n- halibut nuggets\n- smoked salmon chowder\n- salmon burger\n- crab cakes\n\nOur menu has been updated.\nYou can now choose from the following items:\n- rockfish sandwich\n- halibut nuggets\n- smoked salmon chowder\n- black cod tips\n- king crab legs\n</code></pre>"},{"location":"solutions/chapter_5/","title":"Solutions - Chapter 5","text":""},{"location":"solutions/chapter_5/#5-3-alien-colors-1","title":"5-3: Alien Colors #1","text":"<p>Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>'green'</code>, <code>'yellow'</code>, or <code>'red'</code>.</p> <ul> <li> <p>Write an <code>if</code> statement to test whether the alien's color is green. If it is, print a message that the player just earned 5 points.</p> </li> <li> <p>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</p> </li> </ul>"},{"location":"solutions/chapter_5/#passing-version","title":"Passing version","text":"alien_colors_1.py<pre><code>alien_color = 'green'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</code></pre> Output:<pre><code>You just earned 5 points!\n</code></pre>"},{"location":"solutions/chapter_5/#failing-version","title":"Failing version","text":"alien_colors_1_fail.py<pre><code>alien_color = 'red'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</code></pre> <p>(no output)</p>"},{"location":"solutions/chapter_5/#5-4-alien-colors-2","title":"5-4: Alien Colors #2","text":"<p>Choose a color for an alien as you did in Exercise 5-3, and write an <code>if-else</code> chain.</p> <ul> <li>If the alien's color is green, print a statement that the player just earned 5 points for shooting the alien.</li> <li>If the alien's color isn't green, print a statement that the player just earned 10 points.</li> <li>Write one version of this program that runs the <code>if</code> block and another that runs the <code>else</code> block.</li> </ul>"},{"location":"solutions/chapter_5/#if-block-runs","title":"<code>if</code> block runs","text":"alien_colors_2_if_block.py<pre><code>alien_color = 'green'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\nelse:\n    print(\"You just earned 10 points!\")\n</code></pre> Output:<pre><code>You just earned 5 points!\n</code></pre>"},{"location":"solutions/chapter_5/#else-block-runs","title":"<code>else</code> block runs","text":"alien_colors_2_else_block.py<pre><code>alien_color = 'yellow'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\nelse:\n    print(\"You just earned 10 points!\")\n</code></pre> Output:<pre><code>You just earned 10 points!\n</code></pre>"},{"location":"solutions/chapter_5/#5-5-alien-colors-3","title":"5-5: Alien Colors #3","text":"<p>Turn your <code>if-else</code> chain from Exercise 5-4 into an <code>if-elif-else</code> cahin.</p> <ul> <li>If the alien is green, print a message that the player earned 5 points.</li> <li>If the alien is yellow, print a message that the player earned 10 points.</li> <li>If the alien is red, print a message that the player earned 15 points.</li> <li>Write three versions of this program, making sure each message is printed for the appropriate color alien.</li> </ul> alien_colors_3.py<pre><code>alien_color = 'red'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\nelif alien_color == 'yellow':\n    print(\"You just earned 10 points!\")\nelse:\n    print(\"You just earned 15 points!\")\n</code></pre> <p>Output for <code>'red'</code> alien:</p> <pre><code>You just earned 15 points!\n</code></pre>"},{"location":"solutions/chapter_5/#5-6-stages-of-life","title":"5-6: Stages of Life","text":"<p>Write an <code>if-elif-else</code> chain that determines a person's stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a toddler.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a toddler.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is a toddler.</li> <li>If the person is age 65 or older, print a message that the person is an elder.</li> </ul> stages_of_life.py<pre><code>age = 17\n\nif age &lt; 2:\n    print(\"You're a baby!\")\nelif age &lt; 4:\n    print(\"You're a toddler!\")\nelif age &lt; 13:\n    print(\"You're a kid!\")\nelif age &lt; 20:\n    print(\"You're a teenager!\")\nelif age &lt; 65:\n    print(\"You're an adult!\")\nelse:\n    print(\"You're an elder!\")\n</code></pre> Output:<pre><code>You're a teenager!\n</code></pre>"},{"location":"solutions/chapter_5/#5-7-favorite-fruit","title":"5-7: Favorite Fruit","text":"<p>Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it <code>favorite_fruits</code>.</li> <li>Write five <code>if</code> statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the <code>if</code> block should print a statement, such as You really like bananas!</li> </ul> favorite_fruits.py<pre><code>favorite_fruits = ['blueberries', 'salmonberries', 'peaches']\n\nif 'bananas' in favorite_fruits:\n    print(\"You really like bananas!\")\nif 'apples' in favorite_fruits:\n    print(\"You really like apples!\")\nif 'blueberries' in favorite_fruits:\n    print(\"You really like blueberries!\")\nif 'kiwis' in favorite_fruits:\n    print(\"You really like kiwis!\")\nif 'peaches' in favorite_fruits:\n    print(\"You really like peaches!\")\n</code></pre> Output:<pre><code>You really like blueberries!\nYou really like peaches!\n</code></pre>"},{"location":"solutions/chapter_5/#5-8-hello-admin","title":"5-8: Hello Admin","text":"<p>Make a list of five or more usernames, including the name <code>'admin'</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user.</p> <ul> <li>If the username is <code>'admin'</code>, print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for loggin in again.</li> </ul> hello_admin.py<pre><code>usernames = ['eric', 'willie', 'admin', 'erin', 'ever']\n\nfor username in usernames:\n    if username == 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username}, thank you for loggin in again!\")\n</code></pre> Output:<pre><code>Hello eric, thank you for logging in again!\nHello willie, thank you for logging in again!\nHello admin, would you like to see a status report?\nHello erin, thank you for logging in again!\nHello ever, thank you for logging in again!\n</code></pre>"},{"location":"solutions/chapter_5/#5-9-no-users","title":"5-9: No Users","text":"<p>Add an <code>if</code> test to hello_admin.py to make sure the list of users is not empty.</p> <ul> <li>If the list is emtpy, print the message We need to find some users!</li> <li>Remove all of the usernames from your list, and make sure the correct message is printed.</li> </ul> no_users.py<pre><code>usernames = []\n\nif usernames:\n    for username in usernames:\n        if username == 'admin':\n            print(\"Hello admin, would you like to see a status report?\")\n        else:\n            print(f\"Hello {username}, thank you for loggin in again!\")\nelse:\n    print(\"We need to find some users!\")\n</code></pre> Output:<pre><code>We need to find some users!\n</code></pre>"},{"location":"solutions/chapter_5/#5-10-checking-usernames","title":"5-10: Checking Usernames","text":"<p>Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>. Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If <code>'John'</code> has been used, <code>'JOHN'</code> should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul> checking_usernames.py<pre><code>current_users = ['eric', 'willie', 'admin', 'erin', 'Ever']\nnew_users = ['sarah', 'Willie', 'PHIL', 'ever', 'Iona']\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"Sorry {new_user}, that name is taken.\")\n    else:\n        print(f\"Great, {new_user} is still available.\")\n</code></pre> Output:<pre><code>Great, sarah is still available.\nSorry Willie, that name is taken.\nGreat, PHIL is still available.\nSorry ever, that name is taken.\nGreat, Iona is still available.\n</code></pre> Note <p>If you're not comfortable with list comprehensions yet, the list <code>current_users_lower</code> can be generated using a loop:</p> <pre><code>current_users_lower = []\nfor user in current_users:\n    current_users_lower.append(user.lower())\n</code></pre>"},{"location":"solutions/chapter_5/#5-11-ordinal-numbers","title":"5-11: Ordinal Numbers","text":"<p>Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read <code>\"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\"</code>, and each result should be on a separate line.</li> </ul> ordinal_numbers.py<pre><code>numbers = list(range(1,10))\n\nfor number in numbers:\n    if number == 1:\n        print(\"1st\")\n    elif number == 2:\n        print(\"2nd\")\n    elif number == 3:\n        print(\"3rd\")\n    else:\n        print(f\"{number}th\")\n</code></pre> Output:<pre><code>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</code></pre>"},{"location":"solutions/chapter_6/","title":"Solutions - Chapter 6","text":""},{"location":"solutions/chapter_6/#6-1-person","title":"6-1: Person","text":"<p>Use a dictionary to store information about a person you  know. Store their first name, last name, age, and the city in which they live. You should have keys such as <code>first_name</code>, <code>last_name</code>, <code>age</code>, and <code>city</code>. Print each piece of information stored in your dictionary.</p> person.py<pre><code>person = {\n    'first_name': 'eric',\n    'last_name': 'matthes',\n    'age': 43,\n    'city': 'sitka',\n    }\n\nprint(person['first_name'])\nprint(person['last_name'])\nprint(person['age'])\nprint(person['city'])\n</code></pre> Output:<pre><code>eric\nmatthes\n43\nsitka\n</code></pre>"},{"location":"solutions/chapter_6/#6-2-favorite-numbers","title":"6-2: Favorite Numbers","text":"<p>Use a dictionary to store people's favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person's name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p> favorite_numbers.py<pre><code>favorite_numbers = {\n    'mandy': 42,\n    'micah': 23,\n    'gus': 7,\n    'hank': 1_000_000,\n    'maggie': 0,\n    }\n\nnum = favorite_numbers['mandy']\nprint(f\"Mandy's favorite number is {num}.\")\n\nnum = favorite_numbers['micah']\nprint(f\"Micah's favorite number is {num}.\")\n\nnum = favorite_numbers['gus']\nprint(f\"Gus's favorite number is {num}.\")\n\nnum = favorite_numbers['hank']\nprint(f\"Hank's favorite number is {num}.\")\n\nnum = favorite_numbers['maggie']\nprint(f\"Maggie's favorite number is {num}.\")\n</code></pre> Output:<pre><code>Mandy's favorite number is 42.\nMicah's favorite number is 23.\nGus's favorite number is 7.\nHank's favorite number is 1000000.\nMaggie's favorite number is 0.\n</code></pre>"},{"location":"solutions/chapter_6/#6-3-glossary","title":"6-3: Glossary","text":"<p>A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let's call it a glossary.</p> <ul> <li>Think of five programming words you've learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (<code>'\\n'</code>) to insert a blank line between each word-meaning pair in your output.</li> </ul> glossary.py<pre><code>glossary = {\n    'string': 'A series of characters.',\n    'comment': 'A note in a program that the Python interpreter ignores.',\n    'list': 'A collection of items in a particular order.',\n    'loop': 'Work through a collection of items, one at a time.',\n    'dictionary': \"A collection of key-value pairs.\",\n    }\n\nword = 'string'\nprint(f\"\\n{word.title()}: {glossary[word]}\")\n\nword = 'comment'\nprint(f\"\\n{word.title()}: {glossary[word]}\")\n\nword = 'list'\nprint(f\"\\n{word.title()}: {glossary[word]}\")\n\nword = 'loop'\nprint(f\"\\n{word.title()}: {glossary[word]}\")\n\nword = 'dictionary'\nprint(f\"\\n{word.title()}: {glossary[word]}\")\n</code></pre> Output:<pre><code>String: A series of characters.\n\nComment: A note in a program that the Python interpreter ignores.\n\nList: A collection of items in a particular order.\n\nLoop: Work through a collection of items, one at a time.\n\nDictionary: A collection of key-value pairs.\n</code></pre>"},{"location":"solutions/chapter_6/#6-4-glossary-2","title":"6-4: Glossary 2","text":"<p>Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 (page 99) by replacing your series of <code>print()</code> calls with a loop that runs through the dictionary's keys and values. When you're sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p> glossary_2.py<pre><code>glossary = {\n    'string': 'A series of characters.',\n    'comment': 'A note in a program that the Python interpreter ignores.',\n    'list': 'A collection of items in a particular order.',\n    'loop': 'Work through a collection of items, one at a time.',\n    'dictionary': \"A collection of key-value pairs.\",\n    'key': 'The first item in a key-value pair in a dictionary.',\n    'value': 'An item associated with a key in a dictionary.',\n    'conditional test': 'A comparison between two values.',\n    'float': 'A numerical value with a decimal component.',\n    'boolean expression': 'An expression that evaluates to True or False.',\n    }\n\nfor word, definition in glossary.items():\n    print(f\"\\n{word.title()}: {definition}\")\n</code></pre> Output:<pre><code>String: A series of characters.\n\nComment: A note in a program that the Python interpreter ignores.\n\nList: A collection of items in a particular order.\n\nLoop: Work through a collection of items, one at a time.\n\nDictionary: A collection of key-value pairs.\n\nKey: The first item in a key-value pair in a dictionary.\n\nValue: An item associated with a key in a dictionary.\n\nConditional Test: A comparison between two values.\n\nFloat: A numerical value with a decimal component.\n\nBoolean Expression: An expression that evaluates to True or False.\n</code></pre>"},{"location":"solutions/chapter_6/#6-5-rivers","title":"6-5: Rivers","text":"<p>Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be <code>'nile': 'egypt'</code>.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul> rivers.py<pre><code>rivers = {\n    'nile': 'egypt',\n    'mississippi': 'united states',\n    'fraser': 'canada',\n    'kuskokwim': 'alaska',\n    'yangtze': 'china',\n    }\n\nfor river, country in rivers.items():\n    print(f\"The {river.title()} flows through {country.title()}.\")\n\nprint(\"\\nThe following rivers are included in this data set:\")\nfor river in rivers.keys():\n    print(f\"- {river.title()}\")\n\nprint(\"\\nThe following countries are included in this data set:\")\nfor country in rivers.values():\n    print(f\"- {country.title()}\")\n</code></pre> <p>Output*:</p> <pre><code>The Nile flows through Egypt.\nThe Mississippi flows through United States.\nThe Fraser flows through Canada.\nThe Kuskokwim flows through Alaska.\nThe Yangtze flows through China.\n\nThe following rivers are included in this data set:\n- Nile\n- Mississippi\n- Fraser\n- Kuskokwim\n- Yangtze\n\nThe following countries are included in this data set:\n- Egypt\n- United States\n- Canada\n- Alaska\n- China\n</code></pre> <p>* Sometimes we like to think of Alaska as our own separate country.</p>"},{"location":"solutions/chapter_6/#6-6-polling","title":"6-6: Polling","text":"<p>Use the code in favorite_languages.py (page 96).</p> <ul> <li>Make a list of people who should take the favorite languages poll. Include some names that are already in the dictionary and some that are not.</li> <li>Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll.</li> </ul> polling.py<pre><code>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nfor name, language in favorite_languages.items():\n    print(f\"{name.title()}'s favorite language is {language.title()}.\")\n\nprint(\"\\n\")\n\ncoders = ['phil', 'josh', 'david', 'becca', 'sarah', 'matt', 'danielle']\nfor coder in coders:\n    if coder in favorite_languages.keys():\n        print(f\"Thank you for taking the poll, {coder.title()}!\")\n    else:\n        print(f\"{coder.title()}, what's your favorite programming language?\")\n</code></pre> Output:<pre><code>Jen's favorite language is Python.\nSarah's favorite language is C.\nEdward's favorite language is Ruby.\nPhil's favorite language is Python.\n\nThank you for taking the poll, Phil!\nJosh, what's your favorite programming language?\nDavid, what's your favorite programming language?\nBecca, what's your favorite programming language?\nThank you for taking the poll, Sarah!\nMatt, what's your favorite programming language?\nDanielle, what's your favorite programming language?\n</code></pre>"},{"location":"solutions/chapter_6/#6-7-people","title":"6-7: People","text":"<p>Start with the program you wrote for Exercise 6-1 (page 98). Make two new dictionaries representing different people, and store all three dictionaries in a list called <code>people</code>. Loop through your list of people. As you loop through the list, print everything you know about each person.</p> people.py<pre><code># Make an empty list to store people in.\npeople = []\n\n# Define some people, and add them to the list.\nperson = {\n    'first_name': 'eric',\n    'last_name': 'matthes',\n    'age': 46,\n    'city': 'sitka',\n    }\npeople.append(person)\n\nperson = {\n    'first_name': 'lemmy',\n    'last_name': 'matthes',\n    'age': 2,\n    'city': 'sitka',\n    }\npeople.append(person)\n\nperson = {\n    'first_name': 'willie',\n    'last_name': 'matthes',\n    'age': 11,\n    'city': 'sitka',\n    }\npeople.append(person)\n\n# Display all of the information in the dictionary.\nfor person in people:\n    name = f\"{person['first_name'].title()} {person['last_name'].title()}\"\n    age = person['age']\n    city = person['city'].title()\n\n    print(f\"{name}, of {city}, is {age} years old.\")\n</code></pre> Output:<pre><code>Eric Matthes, of Sitka, is 46 years old.\nLemmy Matthes, of Sitka, is 2 years old.\nWillie Matthes, of Sitka, is 11 years old.\n</code></pre>"},{"location":"solutions/chapter_6/#6-8-pets","title":"6-8: Pets","text":"<p>Make several dictionaries, where each dictionary represents a different pet. In each dictionary, include the kind of animal and the owner\u2019s name. Store these dictionaries in a list called <code>pets</code>. Next, loop through your list and as you do, print everything you know about each pet.</p> pets.py<pre><code># Make an empty list to store the pets in.\npets = []\n\n# Make individual pets, and store each one in the list.\npet = {\n    'animal type': 'python',\n    'name': 'john',\n    'owner': 'guido',\n    'weight': 43,\n    'eats': 'bugs',\n}\npets.append(pet)\n\npet = {\n    'animal type': 'chicken',\n    'name': 'clarence',\n    'owner': 'tiffany',\n    'weight': 2,\n    'eats': 'seeds',\n}\npets.append(pet)\n\npet = {\n    'animal type': 'dog',\n    'name': 'peso',\n    'owner': 'eric',\n    'weight': 37,\n    'eats': 'shoes',\n}\npets.append(pet)\n\n# Display information about each pet.\nfor pet in pets:\n    print(f\"\\nHere's what I know about {pet['name'].title()}:\")\n    for key, value in pet.items():\n        print(f\"\\t{key}: {value}\")\n</code></pre> Output:<pre><code>Here's what I know about John:\n    animal type: python\n    name: john\n    owner: guido\n    weight: 43\n    eats: bugs\n\nHere's what I know about Clarence:\n    animal type: chicken\n    name: clarence\n    owner: tiffany\n    weight: 2\n    eats: seeds\n\nHere's what I know about Peso:\n    animal type: dog\n    name: peso\n    owner: eric\n    weight: 37\n    eats: shoes\n</code></pre>"},{"location":"solutions/chapter_6/#6-9-favorite-places","title":"6-9: Favorite Places","text":"<p>Make a dictionary called <code>favorite_places</code>. Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. To make this exericse a bit more interesting, ask some friends to name a few of their favorite places. Loop through the dictionary, and print each person's name and their favorite places.</p> favorite_places.py<pre><code>favorite_places = {\n    'eric': ['bear mountain', 'death valley', 'tierra del fuego'],\n    'erin': ['hawaii', 'iceland'],\n    'willie': ['mt. verstovia', 'the playground', 'new hampshire']\n    }\n\nfor name, places in favorite_places.items():\n    print(f\"\\n{name.title()} likes the following places:\")\n    for place in places:\n        print(f\"- {place.title()}\")\n</code></pre> Output:<pre><code>Eric likes the following places:\n- Bear Mountain\n- Death Valley\n- Tierra Del Fuego\n\nErin likes the following places:\n- Hawaii\n- Iceland\n\nWillie likes the following places:\n- Mt. Verstovia\n- The Playground\n- New Hampshire\n</code></pre>"},{"location":"solutions/chapter_6/#6-10-favorite-numbers","title":"6-10: Favorite Numbers","text":"<p>Modify your program from Exercise 6-2 (page 98) so each person can have more than one favorite number. Then print each person's name along with their favorite numbers.</p> favorite_numbers_6_10.py<pre><code>favorite_numbers = {\n    'mandy': [42, 17],\n    'micah': [42, 39, 56],\n    'gus': [7, 12],\n    }\n\nfor name, numbers in favorite_numbers.items():\n    print(f\"\\n{name.title()} likes the following numbers:\")\n    for number in numbers:\n        print(f\"  {number}\")\n</code></pre> Output:<pre><code>Mandy likes the following numbers:\n  42\n  17\n\nMicah likes the following numbers:\n  42\n  39\n  56\n\nGus likes the following numbers:\n  7\n  12\n</code></pre>"},{"location":"solutions/chapter_6/#6-11-cities","title":"6-11: Cities","text":"<p>Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city's dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p> cities.py<pre><code>cities = {\n    'santiago': {\n        'country': 'chile',\n        'population': 6_310_000,\n        'nearby mountains': 'andes',\n        },\n    'talkeetna': {\n        'country': 'united states',\n        'population': 876,\n        'nearby mountains': 'alaska range',\n        },\n    'kathmandu': {\n        'country': 'nepal',\n        'population': 975_453,\n        'nearby mountains': 'himilaya',\n        }\n    }\n\nfor city, city_info in cities.items():\n    country = city_info['country'].title()\n    population = city_info['population']\n    mountains = city_info['nearby mountains'].title()\n\n    print(f\"\\n{city.title()} is in {country}.\")\n    print(f\"  It has a population of about {population}.\")\n    print(f\"  The {mountains} mounats are nearby.\")\n</code></pre> Output:<pre><code>Santiago is in Chile.\n  It has a population of about 6310000.\n  The Andes mounats are nearby.\n\nTalkeetna is in United States.\n  It has a population of about 876.\n  The Alaska Range mounats are nearby.\n\nKathmandu is in Nepal.\n  It has a population of about 975453.\n  The Himilaya mounats are nearby.\n</code></pre>"},{"location":"solutions/chapter_7/","title":"Solutions - Chapter 7","text":"<p>Note: VS Code isn't always set up to run programs that prompt the user for input. If you're having trouble entering user input with VS Code, see Running programs that use <code>input()</code> for help.</p>"},{"location":"solutions/chapter_7/#7-1-rental-car","title":"7-1: Rental Car","text":"<p>Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \"Let me see if I can find you a Subaru\".</p> rental_car.py<pre><code>car = input(\"What kind of car would you like? \")\n\nprint(f\"Let me see if I can find you a {car.title()}.\")\n</code></pre> Output:<pre><code>What kind of car would you like? Toyota Tacoma\nLet me see if I can find you a Toyota Tacoma.\n</code></pre>"},{"location":"solutions/chapter_7/#7-2-restaurant-seating","title":"7-2: Restaurant Seating","text":"<p>Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they'll have to wait for a table. Otherwise, report that their table is ready.</p> restaurant_seating.py<pre><code>party_size = input(\"How many people are in your dinner party tonight? \")\nparty_size = int(party_size)\n\nif party_size &gt; 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")\n</code></pre> Output:<pre><code>How many people are in your dinner party tonight? 12\nI'm sorry, you'll have to wait for a table.\n</code></pre> <p>or:</p> <pre><code>How many people are in your dinner party tonight? 6\nYour table is ready.\n</code></pre>"},{"location":"solutions/chapter_7/#7-3-multiples-of-ten","title":"7-3: Multiples of Ten","text":"<p>Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p> multiples_of_ten.py<pre><code>number = input(\"Give me a number, please: \")\nnumber = int(number)\n\nif number % 10 == 0:\n    print(f\"{number} is a multiple of 10.\")\nelse:\n    print(f\"{number} is not a multiple of 10.\")\n</code></pre> Output:<pre><code>Give me a number, please: 23\n23 is not a multiple of 10.\n</code></pre> <p>or:</p> <pre><code>Give me a number, please: 90\n90 is a multiple of 10.\n</code></pre>"},{"location":"solutions/chapter_7/#7-4-pizza-toppings","title":"7-4: Pizza Toppings","text":"<p>Write a loop that prompts the user to enter a series of pizza toppings until they enter a <code>quit</code> value. As they enter each topping, print a message saying you'll add that topping to their pizza.</p> pizza_toppings.py<pre><code>prompt = \"\\nWhat topping would you like on your pizza?\"\nprompt += \"\\nEnter 'quit' when you are finished: \"\n\nwhile True:\n    topping = input(prompt)\n    if topping != 'quit':\n        print(f\"  I'll add {topping} to your pizza.\")\n    else:\n        break\n</code></pre> Output:<pre><code>What topping would you like on your pizza?\nEnter 'quit' when you are finished: pepperoni\n  I'll add pepperoni to your pizza.\n\nWhat topping would you like on your pizza?\nEnter 'quit' when you are finished: sausage\n  I'll add sausage to your pizza.\n\nWhat topping would you like on your pizza?\nEnter 'quit' when you are finished: bacon\n  I'll add bacon to your pizza.\n\nWhat topping would you like on your pizza?\nEnter 'quit' when you are finished: quit\n</code></pre>"},{"location":"solutions/chapter_7/#7-5-movie-tickets","title":"7-5: Movie Tickets","text":"<p>A movie theater charges different ticket prices depending on a person's age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket.</p> movie_tickets.py<pre><code>prompt = \"\\nHow old are you?\"\nprompt += \"\\nEnter 'quit' when you are finished. \"\n\nwhile True:\n    age = input(prompt)\n    if age == 'quit':\n        break\n    age = int(age)\n\n    if age &lt; 3:\n        print(\"  You get in free!\")\n    elif age &lt; 13:\n        print(\"  Your ticket is $10.\")\n    else:\n        print(\"  Your ticket is $15.\")\n</code></pre> Output:<pre><code>How old are you?\nEnter 'quit' when you are finished. 2\n  You get in free!\n\nHow old are you?\nEnter 'quit' when you are finished. 3\n  Your ticket is $10.\n\nHow old are you?\nEnter 'quit' when you are finished. 12\n  Your ticket is $10.\n\nHow old are you?\nEnter 'quit' when you are finished. 18\n  Your ticket is $15.\n\nHow old are you?\nEnter 'quit' when you are finished. quit\n</code></pre>"},{"location":"solutions/chapter_7/#7-8-deli","title":"7-8: Deli","text":"<p>Make a list called <code>sandwich_orders</code> and fill it with the names of various sandwiches. Then make an empty list called <code>finished_sandwiches</code>. Loop through the list of sandwich orders and print a message for each order, such as <code>I made your tuna sandwich.</code> As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made.</p> deli.py<pre><code>sandwich_orders = ['veggie', 'grilled cheese', 'turkey', 'roast beef']\nfinished_sandwiches = []\n\nwhile sandwich_orders:\n    current_sandwich = sandwich_orders.pop()\n    print(f\"I'm working on your {current_sandwich} sandwich.\")\n    finished_sandwiches.append(current_sandwich)\n\nprint(\"\\n\")\nfor sandwich in finished_sandwiches:\n    print(f\"I made a {sandwich} sandwich.\")\n</code></pre> Output:<pre><code>I'm working on your roast beef sandwich.\nI'm working on your turkey sandwich.\nI'm working on your grilled cheese sandwich.\nI'm working on your veggie sandwich.\n\nI made a roast beef sandwich.\nI made a turkey sandwich.\nI made a grilled cheese sandwich.\nI made a veggie sandwich.\n</code></pre>"},{"location":"solutions/chapter_7/#7-9-no-pastrami","title":"7-9: No Pastrami","text":"<p>Using the list <code>sandwich_orders</code> from Exercise 7-8, make sure the sandwich <code>'pastrami'</code> appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a <code>while</code> loop to remove all occurences of <code>'pastrami'</code> from <code>sandwich_orders</code>. Make sure no pastrami sandwiches end up in <code>finished_sandiches</code>.</p> no_pastrami.py<pre><code>sandwich_orders = [\n    'pastrami', 'veggie', 'grilled cheese', 'pastrami',\n    'turkey', 'roast beef', 'pastrami']\nfinished_sandwiches = []\n\nprint(\"I'm sorry, we're all out of pastrami today.\")\nwhile 'pastrami' in sandwich_orders:\n    sandwich_orders.remove('pastrami')\n\nprint(\"\\n\")\nwhile sandwich_orders:\n    current_sandwich = sandwich_orders.pop()\n    print(f\"I'm working on your {current_sandwich} sandwich.\")\n    finished_sandwiches.append(current_sandwich)\n\nprint(\"\\n\")\nfor sandwich in finished_sandwiches:\n    print(f\"I made a {sandwich} sandwich.\")\n</code></pre> Output:<pre><code>I'm sorry, we're all out of pastrami today.\n\nI'm working on your roast beef sandwich.\nI'm working on your turkey sandwich.\nI'm working on your grilled cheese sandwich.\nI'm working on your veggie sandwich.\n\nI made a roast beef sandwich.\nI made a turkey sandwich.\nI made a grilled cheese sandwich.\nI made a veggie sandwich.\n</code></pre>"},{"location":"solutions/chapter_7/#7-10-dream-vacation","title":"7-10: Dream Vacation","text":"<p>Write a program that polls users about their dream vacation. Write a prompt similar to If you could visit one place in the world, where would you go? Include a block of code that prints the results of the poll.</p> dream_vacation.py<pre><code>name_prompt = \"\\nWhat's your name? \"\nplace_prompt = \"If you could visit one place in the world, where would it be? \"\ncontinue_prompt = \"\\nWould you like to let someone else respond? (yes/no) \"\n\n# Responses will be stored in the form {name: place}.\nresponses = {}\n\nwhile True:\n    # Ask the user where they'd like to go.\n    name = input(name_prompt)\n    place = input(place_prompt)\n\n    # Store the response.\n    responses[name] = place\n\n    # Ask if there's anyone else responding.\n    repeat = input(continue_prompt)\n    if repeat != 'yes':\n        break\n\n# Show results of the survey.\nprint(\"\\n--- Results ---\")\nfor name, place in responses.items():\n    print(f\"{name.title()} would like to visit {place.title()}.\")\n</code></pre> Output:<pre><code>What's your name? eric\nIf you could visit one place in the world, where would it be? china\n\nWould you like to let someone else respond? (yes/no) yes\n\nWhat's your name? erin\nIf you could visit one place in the world, where would it be? iceland\n\nWould you like to let someone else respond? (yes/no) yes\n\nWhat's your name? ever\nIf you could visit one place in the world, where would it be? japan\n\nWould you like to let someone else respond? (yes/no) \n\n--- Results ---\nEric would like to visit China.\nErin would like to visit Iceland.\nEver would like to visit Japan.\n</code></pre>"},{"location":"solutions/chapter_8/","title":"Solutions - Chapter 8","text":""},{"location":"solutions/chapter_8/#8-1-message","title":"8-1: Message","text":"<p>Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p> message.py<pre><code>def display_message():\n    \"\"\"Display a message about what I'm learning.\"\"\"\n    msg = \"I'm learning to store code in functions.\"\n    print(msg)\n\ndisplay_message()\n</code></pre> Output:<pre><code>I'm learning to store code in functions.\n</code></pre>"},{"location":"solutions/chapter_8/#8-2-favorite-book","title":"8-2: Favorite Book","text":"<p>Write a function called <code>favorite_book()</code> that accepts one parameter, <code>title</code>. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland.</code> Call the function, making sure to include a book title as an argument in the function call.</p> favorite_book.py<pre><code>def favorite_book(title):\n    \"\"\"Display a message about someone's favorite book.\"\"\"\n    print(f\"{title} is one of my favorite books.\")\n\nfavorite_book('The Abstract Wild')\n</code></pre> Output:<pre><code>The Abstract Wild is one of my favorite books.\n</code></pre>"},{"location":"solutions/chapter_8/#8-3-t-shirt","title":"8-3: T-Shirt","text":"<p>Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p> t_shirt.py<pre><code>def make_shirt(size, message):\n    \"\"\"Summarize the shirt that's going to be made.\"\"\"\n    print(f\"\\nI'm going to make a {size} t-shirt.\")\n    print(f'It will say, \"{message}\"')\n\nmake_shirt('large', 'I love Python!')\nmake_shirt(message=\"Readability counts.\", size='medium')\n</code></pre> Output:<pre><code>I'm going to make a large t-shirt.\nIt will say, \"I love Python!\"\n\nI'm going to make a medium t-shirt.\nIt will say, \"Readability counts.\"\n</code></pre>"},{"location":"solutions/chapter_8/#8-4-large-shirts","title":"8-4: Large Shirts","text":"<p>Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p> large_shirts.py<pre><code>def make_shirt(size='large', message='I love Python!'):\n    \"\"\"Summarize the shirt that's going to be made.\"\"\"\n    print(f\"\\nI'm going to make a {size} t-shirt.\")\n    print(f'It will say, \"{message}\"')\n\nmake_shirt()\nmake_shirt(size='medium')\nmake_shirt('small', 'Programmers are loopy.')\n</code></pre> Output:<pre><code>I'm going to make a large t-shirt.\nIt will say, \"I love Python!\"\n\nI'm going to make a medium t-shirt.\nIt will say, \"I love Python!\"\n\nI'm going to make a small t-shirt.\nIt will say, \"Programmers are loopy.\"\n</code></pre>"},{"location":"solutions/chapter_8/#8-5-cities","title":"8-5: Cities","text":"<p>Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland.</code> Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p> cities.py<pre><code>def describe_city(city, country='chile'):\n    \"\"\"Describe a city.\"\"\"\n    msg = f\"{city.title()} is in {country.title()}.\"\n    print(msg)\n\ndescribe_city('santiago')\ndescribe_city('reykjavik', 'iceland')\ndescribe_city('punta arenas')\n</code></pre> Output:<pre><code>Santiago is in Chile.\nReykjavik is in Iceland.\nPunta Arenas is in Chile.\n</code></pre>"},{"location":"solutions/chapter_8/#8-6-city-names","title":"8-6: City Names","text":"<p>Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <p>\"Santiago, Chile\"</p> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p> city_names.py<pre><code>def city_country(city, country):\n    \"\"\"Return a string like 'Santiago, Chile'.\"\"\"\n    return f\"{city.title()}, {country.title()}\"\n\ncity = city_country('santiago', 'chile')\nprint(city)\n\ncity = city_country('ushuaia', 'argentina')\nprint(city)\n\ncity = city_country('longyearbyen', 'svalbard')\nprint(city)\n</code></pre> Output:<pre><code>Santiago, Chile\nUshuaia, Argentina\nLongyearbyen, Svalbard\n</code></pre>"},{"location":"solutions/chapter_8/#8-7-album","title":"8-7: Album","text":"<p>Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use <code>None</code> to add an optional parameter to <code>make_album()</code> that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p> <p>Simple version:</p> album.py<pre><code>def make_album(artist, title):\n    \"\"\"Build a dictionary containing information about an album.\"\"\"\n    album_dict = {\n        'artist': artist.title(),\n        'title': title.title(),\n        }\n    return album_dict\n\nalbum = make_album('metallica', 'ride the lightning')\nprint(album)\n\nalbum = make_album('beethoven', 'ninth symphony')\nprint(album)\n\nalbum = make_album('willie nelson', 'red-headed stranger')\nprint(album)\n</code></pre> Output:<pre><code>{'artist': 'Metallica', 'title': 'Ride The Lightning'}\n{'artist': 'Beethoven', 'title': 'Ninth Symphony'}\n{'artist': 'Willie Nelson', 'title': 'Red-Headed Stranger'}\n</code></pre> <p>With number of songs:</p> album_num_songs.py<pre><code>def make_album(artist, title, num_songs=0):\n    \"\"\"Build a dictionary containing information about an album.\"\"\"\n    album_dict = {\n        'artist': artist.title(),\n        'title': title.title(),\n        }\n    if num_songs:\n        album_dict['num_songs'] = num_songs\n    return album_dict\n\nalbum = make_album('metallica', 'ride the lightning')\nprint(album)\n\nalbum = make_album('beethoven', 'ninth symphony')\nprint(album)\n\nalbum = make_album('willie nelson', 'red-headed stranger')\nprint(album)\n\nalbum = make_album('iron maiden', 'piece of mind', num_songs=8)\nprint(album)\n</code></pre> Output:<pre><code>{'artist': 'Metallica', 'title': 'Ride The Lightning'}\n{'artist': 'Beethoven', 'title': 'Ninth Symphony'}\n{'artist': 'Willie Nelson', 'title': 'Red-Headed Stranger'}\n{'artist': 'Iron Maiden', 'title': 'Piece Of Mind', 'num_songs': 8}\n</code></pre>"},{"location":"solutions/chapter_8/#8-8-user-albums","title":"8-8: User Albums","text":"<p>Start with your program from Exercise 8-7. Write a <code>while</code> loop that allows users to enter an album's artist and title. Once you have that information, call <code>make_album()</code> with the user's input and print the dictionary that's created. Be sure to include a quit value in the <code>while</code> loop.</p> user_albums.py<pre><code>def make_album(artist, title, tracks=0):\n    \"\"\"Build a dictionary containing information about an album.\"\"\"\n    album_dict = {\n        'artist': artist.title(),\n        'title': title.title(),\n        }\n    if tracks:\n        album_dict['tracks'] = tracks\n    return album_dict\n\n# Prepare the prompts.\ntitle_prompt = \"\\nWhat album are you thinking of? \"\nartist_prompt = \"Who's the artist? \"\n\n# Let the user know how to quit.\nprint(\"Enter 'quit' at any time to stop.\")\n\nwhile True:\n    title = input(title_prompt)\n    if title == 'quit':\n        break\n\n    artist = input(artist_prompt)\n    if artist == 'quit':\n        break\n\n    album = make_album(artist, title)\n    print(album)\n\nprint(\"\\nThanks for responding!\")\n</code></pre> Output:<pre><code>Enter 'quit' at any time to stop.\n\nWhat album are you thinking of? number of the beast\nWho's the artist? iron maiden\n{'artist': 'Iron Maiden', 'title': 'Number Of The Beast'}\n\nWhat album are you thinking of? touch of class\nWho's the artist? angel romero\n{'artist': 'Angel Romero', 'title': 'Touch Of Class'}\n\nWhat album are you thinking of? rust in peace\nWho's the artist? megadeth\n{'artist': 'Megadeth', 'title': 'Rust In Peace'}\n\nWhat album are you thinking of? quit\n\nThanks for responding!\n</code></pre>"},{"location":"solutions/chapter_8/#8-9-messages","title":"8-9: Messages","text":"<p>Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p> messages.py<pre><code>def show_messages(messages):\n    \"\"\"Print all messages in the list.\"\"\"\n    for message in messages:\n        print(message)\n\nmessages = [\"hello there\", \"how are u?\", \":)\"]\nshow_messages(messages)\n</code></pre> Output:<pre><code>hello there\nhow are u?\n:)\n</code></pre>"},{"location":"solutions/chapter_8/#8-10-sending-messages","title":"8-10: Sending Messages","text":"<p>Start with a copy of your program from Exercise 8-9. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p> sending_messages.py<pre><code>def show_messages(messages):\n    \"\"\"Print all messages in the list.\"\"\"\n    print(\"Showing all messages:\")\n    for message in messages:\n        print(message)\n\ndef send_messages(messages, sent_messages):\n    \"\"\"Print each message, and then move it to sent_messages.\"\"\"\n    print(\"\\nSending all messages:\")\n    while messages:\n        current_message = messages.pop()\n        print(current_message)\n        sent_messages.append(current_message)\n\nmessages = [\"hello there\", \"how are u?\", \":)\"]\nshow_messages(messages)\n\nsent_messages = []\nsend_messages(messages, sent_messages)\n\nprint(\"\\nFinal lists:\")\nprint(messages)\nprint(sent_messages)\n</code></pre> Output:<pre><code>Showing all messages:\nhello there\nhow are u?\n:)\n\nSending all messages:\n:)\nhow are u?\nhello there\n\nFinal lists:\n[]\n[':)', 'how are u?', 'hello there']\n</code></pre>"},{"location":"solutions/chapter_8/#8-11-archived-messages","title":"8-11: Archived Messages","text":"<p>Start with your work from Exercise 8-10. Call the function <code>send_messages()</code> with a copy of the list of messages. After calling the function, print both of your lists to show that the original list has retained its messages.</p> archived_messages.py<pre><code>def show_messages(messages):\n    \"\"\"Print all messages in the list.\"\"\"\n    print(\"Showing all messages:\")\n    for message in messages:\n        print(message)\n\ndef send_messages(messages, sent_messages):\n    \"\"\"Print each message, and then move it to sent_messages.\"\"\"\n    print(\"\\nSending all messages:\")\n    while messages:\n        current_message = messages.pop()\n        print(current_message)\n        sent_messages.append(current_message)\n\nmessages = [\"hello there\", \"how are u?\", \":)\"]\nshow_messages(messages)\n\nsent_messages = []\nsend_messages(messages[:], sent_messages)\n\nprint(\"\\nFinal lists:\")\nprint(messages)\nprint(sent_messages)\n</code></pre> Output:<pre><code>Showing all messages:\nhello there\nhow are u?\n:)\n\nSending all messages:\n:)\nhow are u?\nhello there\n\nFinal lists:\n['hello there', 'how are u?', ':)']\n[':)', 'how are u?', 'hello there']\n</code></pre>"},{"location":"solutions/chapter_8/#8-12-sandwiches","title":"8-12: Sandwiches","text":"<p>Write a function that accepts a list of items a person wants on a sandwich. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the sandiwch that is being ordered. Call the function three tiems, using a different number of arguments each time.</p> sandwiches.py<pre><code>def make_sandwich(*items):\n    \"\"\"Make a sandwich with the given items.\"\"\"\n    print(\"\\nI'll make you a great sandwich:\")\n    for item in items:\n        print(f\"  ...adding {item} to your sandwich.\")\n    print(\"Your sandwich is ready!\")\n\nmake_sandwich('roast beef', 'cheddar cheese', 'lettuce', 'honey dijon')\nmake_sandwich('turkey', 'apple slices', 'honey mustard')\nmake_sandwich('peanut butter', 'strawberry jam')\n</code></pre> Output:<pre><code>I'll make you a great sandwich:\n  ...adding roast beef to your sandwich.\n  ...adding cheddar cheese to your sandwich.\n  ...adding lettuce to your sandwich.\n  ...adding honey dijon to your sandwich.\nYour sandwich is ready!\n\nI'll make you a great sandwich:\n  ...adding turkey to your sandwich.\n  ...adding apple slices to your sandwich.\n  ...adding honey mustard to your sandwich.\nYour sandwich is ready!\n\nI'll make you a great sandwich:\n  ...adding peanut butter to your sandwich.\n  ...adding strawberry jam to your sandwich.\nYour sandwich is ready!\n</code></pre>"},{"location":"solutions/chapter_8/#8-14-cars","title":"8-14: Cars","text":"<p>Write a function that stores information about a car in a dictionary. the function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature. Your function should work for a call like this one:</p> <pre><code>car = make_car('subaru', 'outback', color='blue', tow_package=True)\n</code></pre> <p>Print the dictionary that's returned to make sure all the information was stored correctly.</p> cars.py<pre><code>def make_car(manufacturer, model, **options):\n    \"\"\"Make a dictionary representing a car.\"\"\"\n    car_dict = {\n        'manufacturer': manufacturer.title(),\n        'model': model.title(),\n        }\n    for option, value in options.items():\n        car_dict[option] = value\n\n    return car_dict\n\nmy_outback = make_car('subaru', 'outback', color='blue', tow_package=True)\nprint(my_outback)\n\nmy_old_accord = make_car('honda', 'accord', year=1991, color='white',\n        headlights='popup')\nprint(my_old_accord)\n</code></pre> Output:<pre><code>{'manufacturer': 'Subaru', 'model': 'Outback', 'color': 'blue', 'tow_package': True}\n{'manufacturer': 'Honda', 'model': 'Accord', 'year': 1991, 'color': 'white', 'headlights': 'popup'}\n</code></pre>"},{"location":"solutions/chapter_8/#8-15-printing-models","title":"8-15: Printing Models","text":"<p>Put the functions for the example printing_models.py in a separate file called printing_functions.py. Write an <code>import</code> statement at the top of printing_models.py, and modify the file to use the imported functions.</p> <p>printing_functions.py:</p> printing_functions.py<pre><code>\"\"\"Functions related to printing 3d models.\"\"\"\n\ndef print_models(unprinted_designs, completed_models):\n    \"\"\"\n    Simulate printing each design, until there are none left.\n    Move each design to completed_models after printing.\n    \"\"\"\n    while unprinted_designs:\n        current_design = unprinted_designs.pop()\n\n        # Simulate creating a 3d print from the design.\n        print(f\"Printing model: {current_design}\")\n        completed_models.append(current_design)\n\ndef show_completed_models(completed_models):\n    \"\"\"Show all the models that were printed.\"\"\"\n    print(\"\\nThe following models have been printed:\")\n    for completed_model in completed_models:\n        print(completed_model)\n</code></pre> <p>printing_models.py:</p> printing_models.py<pre><code>import printing_functions as pf\n\nunprinted_designs = ['iphone case', 'robot pendant', 'dodecahedron']\ncompleted_models = []\n\npf.print_models(unprinted_designs, completed_models)\npf.show_completed_models(completed_models)\n</code></pre> Output:<pre><code>Printing model: dodecahedron\nPrinting model: robot pendant\nPrinting model: iphone case\n\nThe following models have been printed:\ndodecahedron\nrobot pendant\niphone case\n</code></pre>"},{"location":"solutions/chapter_9/","title":"Solutions - Chapter 9","text":""},{"location":"solutions/chapter_9/#9-1-restaurant","title":"9-1: Restaurant","text":"<p>Make a class called <code>Restaurant</code>. The <code>__init__()</code> method for <code>Restaurant</code> should store two attributes: a <code>restaurant_name</code> and a <code>cuisine_type</code>. Make a method called <code>describe_restaurant()</code> that prints these two pieces of information, and a method called <code>open_restaurant()</code> that prints a message indicating that the restaurant is open.</p> <p>Make an instance called <code>restaurant</code> from your class. Print the two attributes individually, and then call both methods.</p> restaurant.py<pre><code>class Restaurant:\n    \"\"\"A class representing a restaurant.\"\"\"\n\n    def __init__(self, name, cuisine_type):\n        \"\"\"Initialize the restaurant.\"\"\"\n        self.name = name.title()\n        self.cuisine_type = cuisine_type\n\n    def describe_restaurant(self):\n        \"\"\"Display a summary of the restaurant.\"\"\"\n        msg = f\"{self.name} serves wonderful {self.cuisine_type}.\"\n        print(f\"\\n{msg}\")\n\n    def open_restaurant(self):\n        \"\"\"Display a message that the restaurant is open.\"\"\"\n        msg = f\"{self.name} is open. Come on in!\"\n        print(f\"\\n{msg}\")\n\nrestaurant = Restaurant('the mean queen', 'pizza')\nprint(restaurant.name)\nprint(restaurant.cuisine_type)\n\nrestaurant.describe_restaurant()\nrestaurant.open_restaurant()\n</code></pre> Output:<pre><code>The Mean Queen\npizza\n\nThe Mean Queen serves wonderful pizza.\n\nThe Mean Queen is open. Come on in!\n</code></pre>"},{"location":"solutions/chapter_9/#9-2-three-restaurants","title":"9-2: Three Restaurants","text":"<p>Start with your class from Exercise 9-1. Create three different instances from the class, and call <code>describe_restaurant()</code> for each instance.</p> three_restaurants.py<pre><code>class Restaurant:\n    \"\"\"A class representing a restaurant.\"\"\"\n\n    def __init__(self, name, cuisine_type):\n        \"\"\"Initialize the restaurant.\"\"\"\n        self.name = name.title()\n        self.cuisine_type = cuisine_type\n\n    def describe_restaurant(self):\n        \"\"\"Display a summary of the restaurant.\"\"\"\n        msg = f\"{self.name} serves wonderful {self.cuisine_type}.\"\n        print(f\"\\n{msg}\")\n\n    def open_restaurant(self):\n        \"\"\"Display a message that the restaurant is open.\"\"\"\n        msg = f\"{self.name} is open. Come on in!\"\n        print(f\"\\n{msg}\")\n\nmean_queen = Restaurant('the mean queen', 'pizza')\nmean_queen.describe_restaurant()\n\nludvigs = Restaurant(\"ludvig's bistro\", 'seafood')\nludvigs.describe_restaurant()\n\nmango_thai = Restaurant('mango thai', 'thai food')\nmango_thai.describe_restaurant()\n</code></pre> Output:<pre><code>The Mean Queen serves wonderful pizza.\n\nLudvig'S Bistro serves wonderful seafood.\n\nMango Thai serves wonderful thai food.\n</code></pre>"},{"location":"solutions/chapter_9/#9-3-users","title":"9-3: Users","text":"<p>Make a class called <code>User</code>. Create two attributes called <code>first_name</code> and <code>last_name</code>, and then create several other attributes that are typically stored in a user profile. Make a method called <code>describe_user()</code> that prints a summary of the user's information. Make another method called <code>greet_user()</code> that prints a personalized greeting to the user.</p> <p>Create several instances representing different users, and call both methods for each user.</p> users.py<pre><code>class User:\n    \"\"\"Represent a simple user profile.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the user.\"\"\"\n        self.first_name = first_name.title()\n        self.last_name = last_name.title()\n        self.username = username\n        self.email = email\n        self.location = location.title()\n\n    def describe_user(self):\n        \"\"\"Display a summary of the user's information.\"\"\"\n        print(f\"\\n{self.first_name} {self.last_name}\")\n        print(f\"  Username: {self.username}\")\n        print(f\"  Email: {self.email}\")\n        print(f\"  Location: {self.location}\")\n\n    def greet_user(self):\n        \"\"\"Display a personalized greeting to the user.\"\"\"\n        print(f\"\\nWelcome back, {self.username}!\")\n\neric = User('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')\neric.describe_user()\neric.greet_user()\n\nwillie = User('willie', 'burger', 'willieburger', 'wb@example.com', 'alaska')\nwillie.describe_user()\nwillie.greet_user()\n</code></pre> Output:<pre><code>Eric Matthes\n  Username: e_matthes\n  Email: e_matthes@example.com\n  Location: Alaska\n\nWelcome back, e_matthes!\n\nWillie Burger\n  Username: willieburger\n  Email: wb@example.com\n  Location: Alaska\n\nWelcome back, willieburger!\n</code></pre>"},{"location":"solutions/chapter_9/#9-4-number-served","title":"9-4: Number Served","text":"<p>Start with your program from Exercise 9-1 (page 162). Add an attribute called <code>number_served</code> with a default value of 0. Create an instance called <code>restaurant</code> from this class. Print the number of customers the restaurant has served, and then change this value and print it again.</p> <p>Add a method called <code>set_number_served()</code> that lets you set the number of customers that have been served. Call this method with a new number and print the value again.</p> <p>Add a method called <code>increment_number_served()</code> that lets you increment the number of customers who've been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business.</p> number_served.py<pre><code>class Restaurant:\n    \"\"\"A class representing a restaurant.\"\"\"\n\n    def __init__(self, name, cuisine_type):\n        \"\"\"Initialize the restaurant.\"\"\"\n        self.name = name.title()\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n\n    def describe_restaurant(self):\n        \"\"\"Display a summary of the restaurant.\"\"\"\n        msg = f\"{self.name} serves wonderful {self.cuisine_type}.\"\n        print(f\"\\n{msg}\")\n\n    def open_restaurant(self):\n        \"\"\"Display a message that the restaurant is open.\"\"\"\n        msg = f\"{self.name} is open. Come on in!\"\n        print(f\"\\n{msg}\")\n\n    def set_number_served(self, number_served):\n        \"\"\"Allow user to set the number of customers that have been served.\"\"\"\n        self.number_served = number_served\n\n    def increment_number_served(self, additional_served):\n        \"\"\"Allow user to increment the number of customers served.\"\"\"\n        self.number_served += additional_served\n\n\nrestaurant = Restaurant('the mean queen', 'pizza')\nrestaurant.describe_restaurant()\n\nprint(f\"\\nNumber served: {restaurant.number_served}\")\nrestaurant.number_served = 500\nprint(f\"Number served: {restaurant.number_served}\")\n\nrestaurant.set_number_served(1000)\nprint(f\"Number served: {restaurant.number_served}\")\n\nrestaurant.increment_number_served(250)\nprint(f\"Number served: {restaurant.number_served}\")\n</code></pre> Output:<pre><code>The Mean Queen serves wonderful pizza.\n\nNumber served: 0\nNumber served: 500\nNumber served: 1000\nNumber served: 1250\n</code></pre>"},{"location":"solutions/chapter_9/#9-5-login-attempts","title":"9-5: Login Attempts","text":"<p>Add an attribute called <code>login_attempts</code> to your <code>User</code> class from Exercise 9-3 (page 162). Write a method called <code>increment_login_attempts()</code> that increments the value of <code>login_attempts</code> by 1. Write another method called <code>reset_login_attempts()</code> that resets the value of <code>login_attempts</code> to 0.</p> <p>Make an instance of the <code>User</code> class and call <code>increment_login_attempts()</code> several times. Print the value of <code>login_attempts</code> to make sure it was incremented properly, and then call <code>reset_login_attempts()</code>. Print <code>login_attempts</code> again to make sure it was reset to 0.</p> login_attempts.py<pre><code>class User:\n    \"\"\"Represent a simple user profile.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the user.\"\"\"\n        self.first_name = first_name.title()\n        self.last_name = last_name.title()\n        self.username = username\n        self.email = email\n        self.location = location.title()\n        self.login_attempts = 0\n\n    def describe_user(self):\n        \"\"\"Display a summary of the user's information.\"\"\"\n        print(f\"\\n{self.first_name} {self.last_name}\")\n        print(f\"  Username: {self.username}\")\n        print(f\"  Email: {self.email}\")\n        print(f\"  Location: {self.location}\")\n\n    def greet_user(self):\n        \"\"\"Display a personalized greeting to the user.\"\"\"\n        print(f\"\\nWelcome back, {self.username}!\")\n\n    def increment_login_attempts(self):\n        \"\"\"Increment the value of login_attempts.\"\"\"\n        self.login_attempts += 1\n\n    def reset_login_attempts(self):\n        \"\"\"Reset login_attempts to 0.\"\"\"\n        self.login_attempts = 0\n\neric = User('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')\neric.describe_user()\neric.greet_user()\n\nprint(\"\\nMaking 3 login attempts...\")\neric.increment_login_attempts()\neric.increment_login_attempts()\neric.increment_login_attempts()\nprint(f\"  Login attempts: {eric.login_attempts}\")\n\nprint(\"Resetting login attempts...\")\neric.reset_login_attempts()\nprint(f\"  Login attempts: {eric.login_attempts}\")\n</code></pre> Output:<pre><code>Eric Matthes\n  Username: e_matthes\n  Email: e_matthes@example.com\n  Location: Alaska\n\nWelcome back, e_matthes!\n\nMaking 3 login attempts...\n  Login attempts: 3\nResetting login attempts...\n  Login attempts: 0\n</code></pre>"},{"location":"solutions/chapter_9/#9-6-ice-cream-stand","title":"9-6: Ice Cream Stand","text":"<p>An ice cream stand is a specific kind of restaurant. Write a class called <code>IceCreamStand</code> that inherits from the <code>Restaurant</code> class you wrote in Exercise 9-1 (page 162) or Exercise 9-4 (page 166). Either version of the class will work; just pick the one you like better. Add an attribute called <code>flavors</code> that stores a list of ice cream flavors. Write a method that displays theese flavors. Create an instance of <code>IceCreamStand</code>, and call this method.</p> ice_cream_stand.py<pre><code>class Restaurant:\n    \"\"\"A class representing a restaurant.\"\"\"\n\n    def __init__(self, name, cuisine_type):\n        \"\"\"Initialize the restaurant.\"\"\"\n        self.name = name.title()\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n\n    def describe_restaurant(self):\n        \"\"\"Display a summary of the restaurant.\"\"\"\n        msg = f\"{self.name} serves wonderful {self.cuisine_type}.\"\n        print(f\"\\n{msg}\")\n\n    def open_restaurant(self):\n        \"\"\"Display a message that the restaurant is open.\"\"\"\n        msg = f\"{self.name} is open. Come on in!\"\n        print(f\"\\n{msg}\")\n\n    def set_number_served(self, number_served):\n        \"\"\"Allow user to set the number of customers that have been served.\"\"\"\n        self.number_served = number_served\n\n    def increment_number_served(self, additional_served):\n        \"\"\"Allow user to increment the number of customers served.\"\"\"\n        self.number_served += additional_served\n\n\nclass IceCreamStand(Restaurant):\n    \"\"\"Represent an ice cream stand.\"\"\"\n\n    def __init__(self, name, cuisine_type='ice cream'):\n        \"\"\"Initialize an ice cream stand.\"\"\"\n        super().__init__(name, cuisine_type)\n        self.flavors = []\n\n    def show_flavors(self):\n        \"\"\"Display the flavors available.\"\"\"\n        print(\"\\nWe have the following flavors available:\")\n        for flavor in self.flavors:\n            print(f\"- {flavor.title()}\")\n\n\nbig_one = IceCreamStand('The Big One')\nbig_one.flavors = ['vanilla', 'chocolate', 'black cherry']\n\nbig_one.describe_restaurant()\nbig_one.show_flavors()\n</code></pre> Output:<pre><code>The Big One serves wonderful ice cream.\n\nWe have the following flavors available:\n- Vanilla\n- Chocolate\n- Black Cherry\n</code></pre>"},{"location":"solutions/chapter_9/#9-7-admin","title":"9-7: Admin","text":"<p>An administrator is a special kind of user. Write a class called <code>Admin</code> that inherits from the <code>User</code> class you wrote in Exercise 9-3 (page 162) or Exercise 9-5 (page 167). Add an attribute, <code>privileges</code>, that stores a list of strings like <code>\"can add post\"</code>, <code>\"can delete post\"</code>, <code>\"can ban user\"</code>, and so on. Write a method called <code>show_privileges()</code> that lists the administrator's set of privileges. Create an instance of <code>Admin</code>, and call your method.</p> admin.py<pre><code>class User:\n    \"\"\"Represent a simple user profile.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the user.\"\"\"\n        self.first_name = first_name.title()\n        self.last_name = last_name.title()\n        self.username = username\n        self.email = email\n        self.location = location.title()\n        self.login_attempts = 0\n\n    def describe_user(self):\n        \"\"\"Display a summary of the user's information.\"\"\"\n        print(f\"\\n{self.first_name} {self.last_name}\")\n        print(f\"  Username: {self.username}\")\n        print(f\"  Email: {self.email}\")\n        print(f\"  Location: {self.location}\")\n\n    def greet_user(self):\n        \"\"\"Display a personalized greeting to the user.\"\"\"\n        print(f\"\\nWelcome back, {self.username}!\")\n\n    def increment_login_attempts(self):\n        \"\"\"Increment the value of login_attempts.\"\"\"\n        self.login_attempts += 1\n\n    def reset_login_attempts(self):\n        \"\"\"Reset login_attempts to 0.\"\"\"\n        self.login_attempts = 0\n\n\nclass Admin(User):\n    \"\"\"A user with administrative privileges.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the admin.\"\"\"\n        super().__init__(first_name, last_name, username, email, location)\n        self.privileges = []\n\n    def show_privileges(self):\n        \"\"\"Display the privileges this administrator has.\"\"\"\n        print(\"\\nPrivileges:\")\n        for privilege in self.privileges:\n            print(f\"- {privilege}\")\n\n\neric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')\neric.describe_user()\n\neric.privileges = [\n    'can reset passwords',\n    'can moderate discussions',\n    'can suspend accounts',\n    ]\n\neric.show_privileges()\n</code></pre> Output:<pre><code>Eric Matthes\n  Username: e_matthes\n  Email: e_matthes@example.com\n  Location: Alaska\n\nPrivileges:\n- can reset passwords\n- can moderate discussions\n- can suspend accounts\n</code></pre>"},{"location":"solutions/chapter_9/#9-8-privileges","title":"9-8: Privileges","text":"<p>Write a separate <code>Privileges</code> class. The class should have one attribute, <code>privileges</code>, that stores a list of strings as described in Exercise 9-7. Move the <code>show_privileges()</code> method to this class. Make a <code>Privileges</code> instance as an attribute in the <code>Admin</code> class. Create a new instance of <code>Admin</code> and use your method to show its privileges.</p> privileges.py<pre><code>class User:\n    \"\"\"Represent a simple user profile.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the user.\"\"\"\n        self.first_name = first_name.title()\n        self.last_name = last_name.title()\n        self.username = username\n        self.email = email\n        self.location = location.title()\n        self.login_attempts = 0\n\n    def describe_user(self):\n        \"\"\"Display a summary of the user's information.\"\"\"\n        print(f\"\\n{self.first_name} {self.last_name}\")\n        print(f\"  Username: {self.username}\")\n        print(f\"  Email: {self.email}\")\n        print(f\"  Location: {self.location}\")\n\n    def greet_user(self):\n        \"\"\"Display a personalized greeting to the user.\"\"\"\n        print(f\"\\nWelcome back, {self.username}!\")\n\n    def increment_login_attempts(self):\n        \"\"\"Increment the value of login_attempts.\"\"\"\n        self.login_attempts += 1\n\n    def reset_login_attempts(self):\n        \"\"\"Reset login_attempts to 0.\"\"\"\n        self.login_attempts = 0\n\n\nclass Admin(User):\n    \"\"\"A user with administrative privileges.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the admin.\"\"\"\n        super().__init__(first_name, last_name, username, email, location)\n\n        # Initialize an empty set of privileges.\n        self.privileges = Privileges()\n\n\nclass Privileges:\n    \"\"\"A class to store an admin's privileges.\"\"\"\n\n    def __init__(self, privileges=[]):\n        self.privileges = privileges\n\n    def show_privileges(self):\n        print(\"\\nPrivileges:\")\n        if self.privileges:\n            for privilege in self.privileges:\n                print(f\"- {privilege}\")\n        else:\n            print(\"- This user has no privileges.\")\n\n\neric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')\neric.describe_user()\n\neric.privileges.show_privileges()\n\nprint(\"\\nAdding privileges...\")\neric_privileges = [\n    'can reset passwords',\n    'can moderate discussions',\n    'can suspend accounts',\n    ]\neric.privileges.privileges = eric_privileges\neric.privileges.show_privileges()\n</code></pre> Output:<pre><code>Eric Matthes\n  Username: e_matthes\n  Email: e_matthes@example.com\n  Location: Alaska\n\nPrivileges:\n- This user has no privileges.\n\nAdding privileges...\n\nPrivileges:\n- can reset passwords\n- can moderate discussions\n- can suspend accounts\n</code></pre>"},{"location":"solutions/chapter_9/#9-9-battery-upgrade","title":"9-9: Battery Upgrade","text":"<p>Use the final version of electric_car.py from this section. Add a method to the <code>Battery</code> class called <code>upgrade_battery()</code>. This method should check the battery size and set the capacity to 65 if it isn't already. Make an electric car with a default battery size, call <code>get_range()</code> once, and then call <code>get_range()</code> a second time after upgrading the battery. You should see an increase in the car's range.</p> battery_upgrade.py<pre><code>class Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        \"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n        \"\"\"Set the odometer reading to the given value.\"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"You can't roll back an odometer!\")\n\n    def increment_odometer(self, miles):\n        \"\"\"Add the given amount to the odometer reading.\"\"\"\n        self.odometer_reading += miles\n\nclass Battery:\n    \"\"\"A simple attempt to model a battery for an electric car.\"\"\"\n\n    def __init__(self, battery_size=40):\n        \"\"\"Initialize the battery's attributes.\"\"\"\n        self.battery_size = battery_size\n\n    def describe_battery(self):\n        \"\"\"Print a statement describing the battery size.\"\"\"\n        print(f\"This car has a {self.battery_size}-kWh battery.\")\n\n    def get_range(self):\n        \"\"\"Print a statement about the range this battery provides.\"\"\"\n        if self.battery_size == 40:\n            range = 150\n        elif self.battery_size == 65:\n            range = 225\n\n        print(f\"This car can go about {range} miles on a full charge.\")\n\n    def upgrade_battery(self):\n        \"\"\"Upgrade the battery if possible.\"\"\"\n        if self.battery_size == 40:\n            self.battery_size = 65\n            print(\"Upgraded the battery to 65 kWh.\")\n        else:\n            print(\"The battery is already upgraded.\")\n\n\nclass ElectricCar(Car):\n    \"\"\"Represent aspects of a car, specific to electric vehicles.\"\"\"\n\n    def __init__(self, make, model, year):\n        \"\"\"\n        Initialize attributes of the parent class.\n        Then initialize attributes specific to an electric car.\n        \"\"\"\n        super().__init__(make, model, year)\n        self.battery = Battery()\n\n\nprint(\"Make an electric car, and check the range:\")\nmy_leaf = ElectricCar('nissan', 'leaf', 2024)\nmy_leaf.battery.get_range()\n\nprint(\"\\nUpgrade the battery, and check the range again:\")\nmy_leaf.battery.upgrade_battery()\nmy_leaf.battery.get_range()\n</code></pre> Output:<pre><code>Make an electric car, and check the range:\nThis car can go about 150 miles on a full charge.\n\nUpgrade the battery, and check the range again:\nUpgraded the battery to 65 kWh.\nThis car can go about 225 miles on a full charge.\n</code></pre>"},{"location":"solutions/chapter_9/#9-10-imported-restaurant","title":"9-10: Imported Restaurant","text":"<p>Using your latest <code>Restaurant</code> class, store it in a module. Make a separate file that imports <code>Restaurant</code>. Make a <code>Restaurant</code> instance, and call one of <code>Restaurant</code>'s methods to show that the <code>import</code> statement is working properly.</p> restaurant.py<pre><code>\"\"\"A class representing a restaurant.\"\"\"\n\nclass Restaurant:\n    \"\"\"A class representing a restaurant.\"\"\"\n\n    def __init__(self, name, cuisine_type):\n        \"\"\"Initialize the restaurant.\"\"\"\n        self.name = name.title()\n        self.cuisine_type = cuisine_type\n        self.number_served = 0\n\n    def describe_restaurant(self):\n        \"\"\"Display a summary of the restaurant.\"\"\"\n        msg = f\"{self.name} serves wonderful {self.cuisine_type}.\"\n        print(f\"\\n{msg}\")\n\n    def open_restaurant(self):\n        \"\"\"Display a message that the restaurant is open.\"\"\"\n        msg = f\"{self.name} is open. Come on in!\"\n        print(f\"\\n{msg}\")\n\n    def set_number_served(self, number_served):\n        \"\"\"Allow user to set the number of customers that have been served.\"\"\"\n        self.number_served = number_served\n\n    def increment_number_served(self, additional_served):\n        \"\"\"Allow user to increment the number of customers served.\"\"\"\n        self.number_served += additional_served\n</code></pre> my_restaurant.py<pre><code>from restaurant import Restaurant\n\nchannel_club = Restaurant('the channel club', 'steak and seafood')\nchannel_club.describe_restaurant()\nchannel_club.open_restaurant()\n</code></pre> Output:<pre><code>The Channel Club serves wonderful steak and seafood.\n\nThe Channel Club is open. Come on in!\n</code></pre>"},{"location":"solutions/chapter_9/#9-11-imported-admin","title":"9-11: Imported Admin","text":"<p>Start with your work from Exercise 9-8 (page 173). Store the classes <code>User</code>, <code>Privileges</code> and <code>Admin</code> in one module. Create a separate file, make an <code>Admin</code> instance, and call <code>show_priveleges()</code> to show that everything is working correctly.</p> user.py<pre><code>\"\"\"A collection of classes for modeling users.\"\"\"\n\nclass User:\n    \"\"\"Represent a simple user profile.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the user.\"\"\"\n        self.first_name = first_name.title()\n        self.last_name = last_name.title()\n        self.username = username\n        self.email = email\n        self.location = location.title()\n        self.login_attempts = 0\n\n    def describe_user(self):\n        \"\"\"Display a summary of the user's information.\"\"\"\n        print(f\"\\n{self.first_name} {self.last_name}\")\n        print(f\"  Username: {self.username}\")\n        print(f\"  Email: {self.email}\")\n        print(f\"  Location: {self.location}\")\n\n    def greet_user(self):\n        \"\"\"Display a personalized greeting to the user.\"\"\"\n        print(f\"\\nWelcome back, {self.username}!\")\n\n    def increment_login_attempts(self):\n        \"\"\"Increment the value of login_attempts.\"\"\"\n        self.login_attempts += 1\n\n    def reset_login_attempts(self):\n        \"\"\"Reset login_attempts to 0.\"\"\"\n        self.login_attempts = 0\n\n\nclass Admin(User):\n    \"\"\"A user with administrative privileges.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the admin.\"\"\"\n        super().__init__(first_name, last_name, username, email, location)\n\n        # Initialize an empty set of privileges.\n        self.privileges = Privileges()\n\n\nclass Privileges:\n    \"\"\"A class to store an admin's privileges.\"\"\"\n\n    def __init__(self, privileges=[]):\n        self.privileges = privileges\n\n    def show_privileges(self):\n        print(\"\\nPrivileges:\")\n        if self.privileges:\n            for privilege in self.privileges:\n                print(f\"- {privilege}\")\n        else:\n            print(\"- This user has no privileges.\")\n</code></pre> my_user.py<pre><code>from user import Admin\n\neric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')\neric.describe_user()\n\neric_privileges = [\n    'can reset passwords',\n    'can moderate discussions',\n    'can suspend accounts',\n    ]\neric.privileges.privileges = eric_privileges\n\nprint(f\"\\nThe admin {eric.username} has these privileges: \")\neric.privileges.show_privileges()\n</code></pre> Output:<pre><code>Eric Matthes\n  Username: e_matthes\n  Email: e_matthes@example.com\n  Location: Alaska\n\nThe admin e_matthes has these privileges: \n- can reset passwords\n- can moderate discussions\n- can suspend accounts\n</code></pre>"},{"location":"solutions/chapter_9/#9-12-multiple-modules","title":"9-12: Multiple Modules","text":"<p>Store the <code>User</code> class in one module, and store the <code>Privileges</code> and <code>Admin</code> classes in a separate module. In a separate file, create an <code>Admin</code> instance and call <code>show_privileges()</code> to show that everything is still working correctly.</p> user.py<pre><code>\"\"\"A class for modeling users.\"\"\"\n\nclass User:\n    \"\"\"Represent a simple user profile.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the user.\"\"\"\n        self.first_name = first_name.title()\n        self.last_name = last_name.title()\n        self.username = username\n        self.email = email\n        self.location = location.title()\n        self.login_attempts = 0\n\n    def describe_user(self):\n        \"\"\"Display a summary of the user's information.\"\"\"\n        print(f\"\\n{self.first_name} {self.last_name}\")\n        print(f\"  Username: {self.username}\")\n        print(f\"  Email: {self.email}\")\n        print(f\"  Location: {self.location}\")\n\n    def greet_user(self):\n        \"\"\"Display a personalized greeting to the user.\"\"\"\n        print(f\"\\nWelcome back, {self.username}!\")\n\n    def increment_login_attempts(self):\n        \"\"\"Increment the value of login_attempts.\"\"\"\n        self.login_attempts += 1\n\n    def reset_login_attempts(self):\n        \"\"\"Reset login_attempts to 0.\"\"\"\n        self.login_attempts = 0\n</code></pre> admin.py<pre><code>\"\"\"A collection of classes for modeling an admin user account.\"\"\"\n\nfrom user import User\n\nclass Admin(User):\n    \"\"\"A user with administrative privileges.\"\"\"\n\n    def __init__(self, first_name, last_name, username, email, location):\n        \"\"\"Initialize the admin.\"\"\"\n        super().__init__(first_name, last_name, username, email, location)\n\n        # Initialize an empty set of privileges.\n        self.privileges = Privileges()\n\n\nclass Privileges:\n    \"\"\"A class to store an admin's privileges.\"\"\"\n\n    def __init__(self, privileges=[]):\n        self.privileges = privileges\n\n    def show_privileges(self):\n        print(\"\\nPrivileges:\")\n        if self.privileges:\n            for privilege in self.privileges:\n                print(f\"- {privilege}\")\n        else:\n            print(\"- This user has no privileges.\")\n</code></pre> my_admin.py<pre><code>from admin import Admin\n\neric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')\neric.describe_user()\n\neric_privileges = [\n    'can reset passwords',\n    'can moderate discussions',\n    'can suspend accounts',\n    ]\neric.privileges.privileges = eric_privileges\n\nprint(f\"\\nThe admin {eric.username} has these privileges: \")\neric.privileges.show_privileges()\n</code></pre> Output:<pre><code>Eric Matthes\n  Username: e_matthes\n  Email: e_matthes@example.com\n  Location: Alaska\n\nThe admin e_matthes has these privileges: \n- can reset passwords\n- can moderate discussions\n- can suspend accounts\n</code></pre>"},{"location":"solutions/chapter_9/#9-13-dice","title":"9-13: Dice","text":"<p>Make a class <code>Die</code> with one attribute called <code>sides</code>, which has a default value of 6. Write a method called <code>roll_die()</code> that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times.</p> <p>Make a 10-sided die and a 20-sided die. Roll each die 10 times.</p> dice.py<pre><code>from random import randint\n\nclass Die:\n    \"\"\"Represent a die, which can be rolled.\"\"\"\n\n    def __init__(self, sides=6):\n        \"\"\"Initialize the die.\"\"\"\n        self.sides = sides\n\n    def roll_die(self):\n        \"\"\"Return a number between 1 and the number of sides.\"\"\"\n        return randint(1, self.sides)\n\n# Make a 6-sided die, and show the results of 10 rolls.\nd6 = Die()\n\nresults = []\nfor roll_num in range(10):\n    result = d6.roll_die()\n    results.append(result)\nprint(\"10 rolls of a 6-sided die:\")\nprint(results)\n\n# Make a 10-sided die, and show the results of 10 rolls.\nd10 = Die(sides=10)\n\nresults = []\nfor roll_num in range(10):\n    result = d10.roll_die()\n    results.append(result)\nprint(\"\\n10 rolls of a 10-sided die:\")\nprint(results)\n\n# Make a 20-sided die, and show the results of 10 rolls.\nd20 = Die(sides=20)\n\nresults = []\nfor roll_num in range(10):\n    result = d20.roll_die()\n    results.append(result)\nprint(\"\\n10 rolls of a 20-sided die:\")\nprint(results)\n</code></pre> Output:<pre><code>10 rolls of a 6-sided die:\n[6, 1, 2, 1, 6, 6, 2, 5, 3, 4]\n\n10 rolls of a 10-sided die:\n[5, 2, 6, 7, 6, 8, 10, 6, 7, 10]\n\n10 rolls of a 20-sided die:\n[5, 1, 14, 4, 10, 13, 3, 2, 18, 20]\n</code></pre>"},{"location":"solutions/chapter_9/#9-14-lottery","title":"9-14: Lottery","text":"<p>Make a list or tuple containing a series of 10 numbers and 5 letters. Randomly select 4 numbers or letters from the list and print a message saying that any ticket matching these 4 numbers or letters wins a prize.</p> lottery.py<pre><code>from random import choice\n\npossibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']\n\nwinning_ticket = []\nprint(\"Let's see what the winning ticket is...\")\n\n# We don't want to repeat winning numbers or letters, so we'll use a\n#   while loop.\nwhile len(winning_ticket) &lt; 4:\n    pulled_item = choice(possibilities)\n\n    # Only add the pulled item to the winning ticket if it hasn't\n    #   already been pulled.\n    if pulled_item not in winning_ticket:\n        print(f\"  We pulled a {pulled_item}!\")\n        winning_ticket.append(pulled_item)\n\nprint(f\"\\nThe final winning ticket is: {winning_ticket}\")\n</code></pre> Output:<pre><code>Let's see what the winning ticket is...\n  We pulled a 2!\n  We pulled a 3!\n  We pulled a 5!\n  We pulled a c!\n\nThe final winning ticket is: [2, 3, 5, 'c']\n</code></pre>"},{"location":"solutions/chapter_9/#9-15-lottery-analysis","title":"9-15: Lottery Analysis","text":"<p>You can use a loop to see how hard it might be to win the kind of lottery you just modeled. Make a list or tuple called <code>my_ticket</code>. Write a loop that keeps pulling numbers until your ticket wins. Print a message reporting how many times the loop had to run to give you a winning ticket.</p> <pre><code>from random import choice\n\ndef get_winning_ticket(possibilities):\n    \"\"\"Return a winning ticket from a set of possibilities.\"\"\"\n    winning_ticket = []\n\n    # We don't want to repeat winning numbers or letters, so we'll use a\n    #   while loop.\n    while len(winning_ticket) &lt; 4:\n        pulled_item = choice(possibilities)\n\n        # Only add the pulled item to the winning ticket if it hasn't\n        #   already been pulled.\n        if pulled_item not in winning_ticket:\n            winning_ticket.append(pulled_item)\n\n    return winning_ticket\n\ndef check_ticket(played_ticket, winning_ticket):\n    # Check all elements in the played ticket. If any are not in the \n    #   winning ticket, return False.\n    for element in played_ticket:\n        if element not in winning_ticket:\n            return False\n\n    # We must have a winning ticket!\n    return True\n\ndef make_random_ticket(possibilities):\n    \"\"\"Return a random ticket from a set of possibilities.\"\"\"\n    ticket = []\n    # We don't want to repeat numbers or letters, so we'll use a while loop.\n    while len(ticket) &lt; 4:\n        pulled_item = choice(possibilities)\n\n        # Only add the pulled item to the ticket if it hasn't already\n        #   been pulled.\n        if pulled_item not in ticket:\n            ticket.append(pulled_item)\n\n    return ticket\n\n\npossibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 'd', 'e']\nwinning_ticket = get_winning_ticket(possibilities)\n\nplays = 0\nwon = False\n\n# Let's set a max number of tries, in case this takes forever!\nmax_tries = 1_000_000\n\nwhile not won:\n    new_ticket = make_random_ticket(possibilities)\n    won = check_ticket(new_ticket, winning_ticket)\n    plays += 1\n    if plays &gt;= max_tries:\n        break\n\nif won:\n    print(\"We have a winning ticket!\")\n    print(f\"Your ticket: {new_ticket}\")\n    print(f\"Winning ticket: {winning_ticket}\")\n    print(f\"It only took {plays} tries to win!\")\nelse:\n    print(f\"Tried {plays} times, without pulling a winner. :(\")\n    print(f\"Your ticket: {new_ticket}\")\n    print(f\"Winning ticket: {winning_ticket}\")\n</code></pre> Output:<pre><code>We have a winning ticket!\nYour ticket: [1, 4, 'a', 9]\nWinning ticket: [1, 9, 'a', 4]\nIt only took 731 tries to win!\n</code></pre>"},{"location":"updates/","title":"Updates","text":"<p>When looking for updates it\u2019s helpful to know which printing you\u2019re working from, as minor corrections are made every time the book goes through another print run. Right now, the book is on its second printing. You can see which printing you have by looking on the copyright page, which is on the back of the second page in the physical book.</p> <ul> <li>First printing</li> <li>Second printing</li> <li>Third printing</li> <li>Fourth printing</li> </ul> <p>If you find an error in the book or can\u2019t get something to work, please let me know! You can reach me through email at ehmatthes@gmail.com, on Mastodon at @ehmatthes@fosstodon.org or on Bluesky at @ehmatthes.bsky.social.</p>"},{"location":"updates/first_printing/","title":"Updates and Errata - First printing","text":"<p>This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won\u2019t affect the code you\u2019re entering.</p> <p>Code that produces warnings but still runs correctly is noted under Errata, as this is a fairly common occurrence and the code often still works for a long time while producing warnings.</p> <p>If you find an error in the book that's not listed here, or can\u2019t get something to work, please let me know. You can reach me through email at ehmatthes@gmail.com, or on Twitter at @ehmatthes.</p> <ul> <li>Updates<ul> <li>Chapter 16</li> </ul> </li> <li>Errata<ul> <li>Chapter 6</li> <li>Chapter 9</li> <li>Chapter 10</li> <li>Chapter 15</li> <li>Chapter 16</li> <li>Chapter 17</li> <li>Chapter 18</li> <li>Chapter 19</li> </ul> </li> </ul>"},{"location":"updates/first_printing/#updates","title":"Updates","text":""},{"location":"updates/first_printing/#chapter-16","title":"Chapter 16","text":"<p>On Windows, the calls to <code>path.read_text()</code> should all have an <code>encoding='utf-8'</code> argument. On page 330, that would look like this:</p> <pre><code>path = Path('weather_data/sitka_weather_07-2021_simple.csv')\nlines = path.read_text(encoding='utf-8').splitlines()\n</code></pre> <p>This also affects the calls to <code>path.read_text()</code> on pages 339 and 343. There are a few other grayed-out references to <code>path.read_text()</code> that should include this argument, but that shouldn't affect the code you're entering. Those are on pages 332, 334, 336, 339, 345, and 348.</p>"},{"location":"updates/first_printing/#errata","title":"Errata","text":""},{"location":"updates/first_printing/#chapter-6","title":"Chapter 6","text":"<p>The output at the bottom of page 95 should say <code>position</code>, not <code>x-position</code>:</p> <pre><code>Original position: 0\nNew position: 2\n</code></pre>"},{"location":"updates/first_printing/#chapter-9","title":"Chapter 9","text":"<p>On page 167, the docstring for the <code>__init__()</code> method in electric_car.py should have triple quotes on both ends:</p> <pre><code>    def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        ...\n</code></pre>"},{"location":"updates/first_printing/#chapter-10","title":"Chapter 10","text":"<p>On page 200, Exercise 10-7 should read \"Wrap your code from Exercise 10-6 in a while loop...\"</p> <p>Also, Exercise 10-9 should refer to Exercise 10-8.</p>"},{"location":"updates/first_printing/#chapter-15","title":"Chapter 15","text":"<p>Matplotlib has a number of predefined styles that you can choose from. The book uses the <code>seaborn</code> style, which was base on a style from the Seaborn plotting library. The default style of the Seaborn library has diverged from Matplotlib's <code>seaborn</code> style, so they are changing the name of this style to make that clear. (If you're curious to read more about this, see \"seaborn styles renamed\" in the Matplotlib documentation page API Changes for 3.6.0.)</p> <p>If you use <code>seaborn</code> as the book does, you'll see a <code>MatplotlibDeprecationWarning</code>. This won't prevent your code from running, and it won't affect the style of your output.</p> <p>To avoid seeing this warning, use <code>seaborn-v0_8</code> wherever you see <code>seaborn</code> in the book's code. The code should look like this:</p> <pre><code>plt.style.use('seaborn-v0_8')\n</code></pre>"},{"location":"updates/first_printing/#chapter-16_1","title":"Chapter 16,","text":"<p>As noted above for Chapter 15, use <code>seaborn-v0_8</code> wherever you see <code>seaborn</code>.</p>"},{"location":"updates/first_printing/#chapter-17","title":"Chapter 17","text":"<p>On page 370, the code that starts the <code>for</code> loop should go through index <code>30</code>, not <code>5</code>:</p> <pre><code>submission_dicts = []\nfor submission_id in submission_ids[:30]:\n    # Make a new API call for each submission.\n    ...\n</code></pre>"},{"location":"updates/first_printing/#chapter-18","title":"Chapter 18","text":"<p>On page 391, the path to the index.html template should read:</p> <pre><code>learning_log/learning_logs/templates/learning_logs/index.html\n</code></pre> <p>On page 399, the listing for topics.html has an extra closing tag <code>&lt;/li&gt;</code>. It should look like this:</p> <pre><code>    {% for topic in topics %}\n      &lt;li&gt;\n        &lt;a href=\"{% url 'learning_logs:topic' topic.id %}\"&gt;\n          {{ topic.text }}&lt;/a&gt;\n      &lt;/li&gt;\n      ...\n</code></pre>"},{"location":"updates/first_printing/#chapter-19","title":"Chapter 19","text":"<p>On page 416, the sentence </p> <p>Make a new urls.py file in the directory ll_project/accounts/ and add the following...</p> <p>should instead read:</p> <p>Make a new urls.py file in the directory learning_log/accounts/ and add the following...</p> <p>On page 417 under The login Template the path to the <code>accounts/</code> directory should be <code>learning_log/accounts/</code>, not <code>ll_project/accounts/</code>. The full path to the <code>login.html</code> template should be: <code>learning_log/accounts/templates/registration/login.html</code>.</p> <p>Also on page 417, the word Settting should only have two Ts.</p> <p>On page 425, in the grayed out code for models.py, the <code>text</code> attribute should be lowercase:</p> <pre><code>class Topic(models.Model):\n    \"\"\"A topic the user is learning about.\"\"\"\n    text = models.CharField(max_length=200)\n    ...\n</code></pre>"},{"location":"updates/fourth_printing/","title":"Updates and Errata - Fourth printing","text":"<p>This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won\u2019t affect the code you\u2019re entering.</p> <p>Code that produces warnings but still runs correctly is noted under Errata, as this is a fairly common occurrence and the code often still works for a long time while producing warnings.</p> <p>If you find an error in the book that's not listed here, or can\u2019t get something to work, please let me know. You can reach me through email at ehmatthes@gmail.com, or on Twitter at @ehmatthes.</p> <ul> <li>Updates</li> <li>Errata<ul> <li>Chapter 19</li> </ul> </li> </ul>"},{"location":"updates/fourth_printing/#updates","title":"Updates","text":"<p>There are no updates to note at this time.</p>"},{"location":"updates/fourth_printing/#errata","title":"Errata","text":""},{"location":"updates/fourth_printing/#chapter-19","title":"Chapter 19","text":"<p>On page 417 under The login Template the path to the <code>accounts/</code> directory should be <code>learning_log/accounts/</code>, not <code>ll_project/accounts/</code>. The full path to the <code>login.html</code> template should be: <code>learning_log/accounts/templates/registration/login.html</code>.</p>"},{"location":"updates/second_printing/","title":"Updates and Errata - Second printing","text":"<p>This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won\u2019t affect the code you\u2019re entering.</p> <p>Code that produces warnings but still runs correctly is noted under Errata, as this is a fairly common occurrence and the code often still works for a long time while producing warnings.</p> <p>If you find an error in the book that's not listed here, or can\u2019t get something to work, please let me know. You can reach me through email at ehmatthes@gmail.com, or on Twitter at @ehmatthes.</p> <ul> <li>Updates<ul> <li>Chapter 16</li> </ul> </li> <li>Errata<ul> <li>Chapter 6</li> <li>Chapter 15</li> <li>Chapter 16</li> <li>Chapter 17</li> <li>Chapter 18</li> <li>Chapter 19</li> </ul> </li> </ul>"},{"location":"updates/second_printing/#updates","title":"Updates","text":""},{"location":"updates/second_printing/#chapter-16","title":"Chapter 16","text":"<p>On Windows, the calls to <code>path.read_text()</code> should all have an <code>encoding='utf-8'</code> argument. On page 330, that would look like this:</p> <pre><code>path = Path('weather_data/sitka_weather_07-2021_simple.csv')\nlines = path.read_text(encoding='utf-8').splitlines()\n</code></pre> <p>This also affects the calls to <code>path.read_text()</code> on pages 339 and 343. There are a few other grayed-out references to <code>path.read_text()</code> that should include this argument, but that shouldn't affect the code you're entering. Those are on pages 332, 334, 336, 339, 345, and 348.</p>"},{"location":"updates/second_printing/#errata","title":"Errata","text":""},{"location":"updates/second_printing/#chapter-6","title":"Chapter 6","text":"<p>The output at the bottom of page 95 should say <code>position</code>, not <code>x-position</code>:</p> <pre><code>Original position: 0\nNew position: 2\n</code></pre>"},{"location":"updates/second_printing/#chapter-15","title":"Chapter 15","text":"<p>Matplotlib has a number of predefined styles that you can choose from. The book uses the <code>seaborn</code> style, which was base on a style from the Seaborn plotting library. The default style of the Seaborn library has diverged from Matplotlib's <code>seaborn</code> style, so they are changing the name of this style to make that clear. (If you're curious to read more about this, see \"seaborn styles renamed\" in the Matplotlib documentation page API Changes for 3.6.0.)</p> <p>If you use <code>seaborn</code> as the book does, you'll see a <code>MatplotlibDeprecationWarning</code>. This won't prevent your code from running, and it won't affect the style of your output.</p> <p>To avoid seeing this warning, use <code>seaborn-v0_8</code> wherever you see <code>seaborn</code> in the book's code. The code should look like this:</p> <pre><code>plt.style.use('seaborn-v0_8')\n</code></pre>"},{"location":"updates/second_printing/#chapter-16_1","title":"Chapter 16","text":"<p>As noted above for Chapter 15, use <code>seaborn-v0_8</code> wherever you see <code>seaborn</code>.</p>"},{"location":"updates/second_printing/#chapter-17","title":"Chapter 17","text":"<p>On page 370, the code that starts the <code>for</code> loop should go through index <code>30</code>, not <code>5</code>:</p> <pre><code>submission_dicts = []\nfor submission_id in submission_ids[:30]:\n    # Make a new API call for each submission.\n    ...\n</code></pre>"},{"location":"updates/second_printing/#chapter-18","title":"Chapter 18","text":"<p>On page 391, the path to the index.html template should read:</p> <pre><code>learning_log/learning_logs/templates/learning_logs/index.html\n</code></pre>"},{"location":"updates/second_printing/#chapter-19","title":"Chapter 19","text":"<p>On page 416, the sentence:</p> <p>Make a new urls.py file in the directory ll_project/accounts/ and add the following...</p> <p>should instead read:</p> <p>Make a new urls.py file in the directory learning_log/accounts/ and add the following...</p> <p>On page 417 under The login Template the path to the <code>accounts/</code> directory should be <code>learning_log/accounts/</code>, not <code>ll_project/accounts/</code>. The full path to the <code>login.html</code> template should be: <code>learning_log/accounts/templates/registration/login.html</code>.</p> <p>Also on page 417, the word Settting should only have two Ts.</p>"},{"location":"updates/third_printing/","title":"Updates and Errata - Third printing","text":"<p>This page is broken into two parts, Updates and Errata. Updates address issues that affect whether your code will run or not. Errata refer to minor issues such as typos, and errors in grayed-out code that probably won\u2019t affect the code you\u2019re entering.</p> <p>Code that produces warnings but still runs correctly is noted under Errata, as this is a fairly common occurrence and the code often still works for a long time while producing warnings.</p> <p>If you find an error in the book that's not listed here, or can\u2019t get something to work, please let me know. You can reach me through email at ehmatthes@gmail.com, or on Twitter at @ehmatthes.</p> <ul> <li>Updates</li> <li>Errata<ul> <li>Chapter 17</li> <li>Chapter 18</li> <li>Chapter 19</li> </ul> </li> </ul>"},{"location":"updates/third_printing/#updates","title":"Updates","text":"<p>There are no updates to note at this time.</p>"},{"location":"updates/third_printing/#errata","title":"Errata","text":""},{"location":"updates/third_printing/#chapter-17","title":"Chapter 17","text":"<p>On page 370, the code that starts the <code>for</code> loop should go through index <code>30</code>, not <code>5</code>:</p> <pre><code>submission_dicts = []\nfor submission_id in submission_ids[:30]:\n    # Make a new API call for each submission.\n    ...\n</code></pre>"},{"location":"updates/third_printing/#chapter-18","title":"Chapter 18","text":"<p>On page 391, the path to the index.html template should read:</p> <pre><code>learning_log/learning_logs/templates/learning_logs/index.html\n</code></pre>"},{"location":"updates/third_printing/#chapter-19","title":"Chapter 19","text":"<p>On page 417 under The login Template the path to the <code>accounts/</code> directory should be <code>learning_log/accounts/</code>, not <code>ll_project/accounts/</code>. The full path to the <code>login.html</code> template should be: <code>learning_log/accounts/templates/registration/login.html</code>.</p> <p>Also on page 417, the word Settting should only have two Ts.</p>"},{"location":"updates/which_printing/","title":"Which printing do I have?","text":"<p>You can see which printing you have by looking at the copyright page, which is on the back of the second page in the physical book:</p> <p></p> <p>The image above shows the top of the copyright page, with the printing number outlined in blue.</p>"}]}